//META{"name":"discordCrypt"}*//

/*******************************************************************************
 * MIT License
 *
 * Copyright (c) 2018 Leonardo Gates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

"use strict";class discordCrypt{constructor(){this.messageMarkupClass=".markup",this.searchUiClass=".search .search-bar",this.channelTextAreaClass=".content textarea",this.autoCompleteClass=".autocomplete-1vrmpx",this.encodedMessageHeader="\u28b7\u28b8\u28b9\u28ba",this.encodedKeyHeader="\u28bb\u28bc\u28bd\u28be",this.messageHeader="-----ENCRYPTED MESSAGE-----",this.masterPassword=null,this.scanInterval=void 0,this.toolbarReloadInterval=void 0,this.updateHandlerInterval=void 0,this.timedMessageInterval=void 0,this.messageUpdateDispatcher=null,this.configFile=null,this.cachedModules={},this.encryptModes=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],this.encryptBlockModes=["CBC","CFB","OFB"],this.paddingModes=["PKC7","ANS2","ISO1","ISO9"],this.appCss="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",this.toolbarHtml="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",this.masterPasswordHtml="eNqtUs1uwyAMfhWLqUeUrLt1aS7bA+wVHKANGgUETqu+/SAJSVpNO42DY9n+fjBppL6ClkcmBb9gJBW4u6pg8M5AGIxx7JRSC81mfq5yoWzCnbQy8hfQYzvS3agjI+cP8FbvEiM0/b6UhTMuHF5Opzqdd1aEeoUyGZv9XeKZtU3V7zO2C1U7hpRHj7ZAfHAXT0+QPLBMa+sHArr7pOuT55sLD/ZLjc/OZ2LZ8XWaNGXbn0jYYVTwVTpV8QbTxmbaSEiQA+8w5LsvpuEImyfII0NkW1hG8ICk7XnZ4k1L6g+QNjUKVUnpSTBRhsEkRjT6bCfFbiBydjMxFZ5YX+t6t77AYI0T31zOF+Ud2f/QhCXj2qbfJSoG+fzhRKAVyowG2o8xb6qJYrUzfab4AyMh9Dk=",this.settingsMenuHtml="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",this.unlockIcon="PHN2ZyBjbGFzcz0iZGMtc3ZnIiBmaWxsPSJsaWdodGdyZXkiIGhlaWdodD0iMjBweCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjBweCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cGF0aCBkPSJNMTIgMTdjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0yLTIgLjktMiAyIC45IDIgMiAyem02LTloLTFWNmMwLTIuNzYtMi4yNC01LTUtNVM3IDMuMjQgNyA2aDEuOWMwLTEuNzEgMS4zOS0zLjEgMy4xLTMuMSAxLjcxIDAgMy4xIDEuMzkgMy4xIDMuMXYySDZjLTEuMSAwLTIgLjktMiAydjEwYzAgMS4xLjkgMiAyIDJoMTJjMS4xIDAgMi0uOSAyLTJWMTBjMC0xLjEtLjktMi0yLTJ6bTAgMTJINlYxMGgxMnYxMHoiPjwvcGF0aD48L3N2Zz4=",this.lockIcon="PHN2ZyBjbGFzcz0iZGMtc3ZnIiBmaWxsPSJsaWdodGdyZXkiIGhlaWdodD0iMjBweCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjBweCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48ZGVmcz48cGF0aCBkPSJNMCAwaDI0djI0SDBWMHoiIGlkPSJhIi8+PC9kZWZzPjxjbGlwUGF0aCBpZD0iYiI+PHVzZSBvdmVyZmxvdz0idmlzaWJsZSIgeGxpbms6aHJlZj0iI2EiLz48L2NsaXBQYXRoPjxwYXRoIGNsaXAtcGF0aD0idXJsKCNiKSIgZD0iTTEyIDE3YzEuMSAwIDItLjkgMi0ycy0uOS0yLTItMi0yIC45LTIgMiAuOSAyIDIgMnptNi05aC0xVjZjMC0yLjc2LTIuMjQtNS01LTVTNyAzLjI0IDcgNnYySDZjLTEuMSAwLTIgLjktMiAydjEwYzAgMS4xLjkgMiAyIDJoMTJjMS4xIDAgMi0uOSAyLTJWMTBjMC0xLjEtLjktMi0yLTJ6TTguOSA2YzAtMS43MSAxLjM5LTMuMSAzLjEtMy4xczMuMSAxLjM5IDMuMSAzLjF2Mkg4LjlWNnpNMTggMjBINlYxMGgxMnYxMHoiLz48L3N2Zz4=",this.libraries={"currify.js":{requiresElectron:!1,requiresBrowser:!0,code:"eNqdVFFv2yAQ/iuONaWgEit5jUujae2etvZlfbKs1rWhYaLgYWgWOfz3gcFOKuWh3Ys5HXcfd9995xk1otZMCiBgzyhI5fNvUusUY71viaQJ+dtKpbv5PDWiIZQJ0qSz8fJVNoYTGI4shmIBYE54RxKPN+IfEQPKfB7OrHptYDBBUSIRUntOdKJyoPC5Z3dMNHK3Ccf6XMQLl88V34TjbERHON34z1pvWQez2ijF6N4Xby2YWIH9W6USgRQiuSLaKJGMd4kAzos07CePBBSZgccZKWgZLDVYHqbGZ+hQ5I9hyvERjdznmPm8hvG92oHOltD72ehj0edRORZkl9wqJRV4+lYJIXXimm3idJKLLz21F08w11sldwnPatkQnP68v3n4cft4d//r8fv9w91Nirj1cC32peM+TnPdW5v7FoplmdUV56AdB41OteNTCR4CV2UhypEtCcjhIKBFLTomDnw65mwM8i+Ol0MR7ENMUdexF4rAy1xc6YwT8aK3ubi8hBJoVwScqrCgjxNeF8eyfRmwT43TaqcVc7ofGNX4dMawDyDFabsRV2VV2/I9eJOsSZaoUi/mlQjduX5PXiGfjfei+mwGkv+Tg9gHskqbn0g8/iim+UwrJWBQWJBiSkXSbaXhTfJMpqWZpW7o05/iPc1+nEFG09txpIjhr0pVe0CuVxuyWK2XEFG8yumVE4GbNivoYlUe05yc/LpIh4pYxLjGKlrwfMMsrJM5VkXARI54H1sotwxS1JUGDA2lZa2SWnomso6zmoRdOZIIHfn1VMJirGqxQnwUqQYGFnV5OBhrUe9Ydx9UpFG3aQnBZEML838pAQw+"},"curve25519.js":{requiresElectron:!0,requiresBrowser:!1,code:""},"sha3.js":{requiresElectron:!0,requiresBrowser:!1,code:"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"},"sjcl.js":{requiresElectron:!0,requiresBrowser:!1,code:""},"smalltalk.js":{requiresElectron:!1,requiresBrowser:!0,code:"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"}}}getName(){return"DiscordCrypt"}getDescription(){return"Provides secure messaging for Discord using various cryptography standards."}getAuthor(){return"Leonardo Gates"}getVersion(){return"1.2.7"}start(){const e=this;if(!discordCrypt.validPluginName())return void _alert("Hi There! - DiscordCrypt","Oops!\r\n\r\nIt seems you didn't read discordCrypt's usage guide. :(\r\nYou need to name this plugin exactly as follows to allow it to function correctly.\r\n\r\n"+`\t${discordCrypt.getPluginName()}\r\n\r\n\r\n`+"You should probably check the usage guide again just in case you missed anything else. :)");if(!this.configFile)return void this.loadMasterPassword();discordCrypt.__shouldIgnoreUpdates(this.getVersion())||(this.checkForUpdates(),this.updateHandlerInterval=setInterval(()=>{e.checkForUpdates()},36e5));const t=discordCrypt.getWebpackModuleSearcher();this.cachedModules={MessageParser:t.findByUniqueProperties(["createMessage","parse","unparse"]),MessageController:t.findByUniqueProperties(["sendClydeError","sendBotMessage"]),MessageActionTypes:t.findByUniqueProperties(["ActionTypes","ActivityTypes"]),MessageDispatcher:t.findByUniqueProperties(["dispatch","maybeDispatch","dirtyDispatch"]),MessageQueue:t.findByUniqueProperties(["enqueue","handleSend","handleResponse"]),UserResolver:t.findByUniqueProperties(["getUser","getUsers","findByTag"]),GuildResolver:t.findByUniqueProperties(["getGuild","getGuilds"]),ChannelResolver:t.findByUniqueProperties(["getChannel","getChannels","getDMFromUserId","getDMUserIds"]),HighlightJS:t.findByUniqueProperties(["initHighlighting","highlightBlock","highlightAuto"])};for(let e in this.cachedModules)if("object"!=typeof this.cachedModules[e])return void _alert("Error Loading DiscordCrypt",`Could not find requisite module: ${e}`);this.hookMessageCallbacks()?setImmediate(()=>{this.loadToolbar(),this.attachHandler()}):this.toolbarReloadInterval=setInterval(()=>{e.loadToolbar(),e.attachHandler()},5e3),this.scanInterval=setInterval(()=>{e.decodeMessages()},e.configFile.encryptScanDelay),this.timedMessageInterval=setInterval(()=>{let t=Date.now();e.configFile.timedMessages.forEach((r,s)=>{if(r&&r.expireTime||(e.configFile.timedMessages.splice(s,1),e.saveConfig()),r.expireTime<t){discordCrypt.log(`Deleting timed message "${e.configFile.timedMessages[s].messageId}"`);try{discordCrypt.deleteMessage(r.channelId,r.messageId,e.cachedModules)}catch(r){discordCrypt.log(`${r.messageId}: ${r.toString()}`,"error")}e.configFile.timedMessages.splice(s,1),e.saveConfig()}})},5e3),setImmediate(()=>{e.decodeMessages()})}stop(){discordCrypt.validPluginName()&&($(this.channelTextAreaClass).off("keydown.dcrypt"),this.unhookMessageCallbacks()||clearInterval(this.toolbarReloadInterval),clearInterval(this.scanInterval),clearInterval(this.timedMessageInterval),clearInterval(this.updateHandlerInterval),$("#dc-overlay").remove(),$("#dc-file-btn").remove(),$("#dc-lock-btn").remove(),$("#dc-passwd-btn").remove(),$("#dc-exchange-btn").remove(),$("#dc-settings-btn").remove(),$("#dc-quick-exchange-btn").remove(),$("#dc-clipboard-upload-btn").remove(),this.configFile=null)}load(){discordCrypt.injectCSS("dc-css",discordCrypt.__zlibDecompress(this.appCss)),discordCrypt.__loadLibraries(this.libraries)}unload(){discordCrypt.clearCSS("dc-css")}getDefaultConfig(){return{version:this.getVersion(),useEmbeds:!1,defaultPassword:"\u2813\u28ed\u286b\u28ee\u28b9\u28ae\u2816\u28e6\u282c\u28ac\u28f8\u2833\u281c\u28cd\u28ab\u2833\u28c2\u2819\u28f5\u2858\u2855\u2810\u28ab\u2897\u2819\u2871\u2801\u2877\u283a\u2857\u281f\u2821\u28b4\u2896\u2883\u2859\u28ba\u28c4\u28d1\u28d7\u28ac\u2871\u28f4\u282e\u2843\u288f\u289a\u28a3\u28fe\u288e\u28a9\u28d9\u2801\u28f6\u2881\u2837\u28ce\u2807\u2826\u2883\u2826\u2807\u28e9\u2845",encodeMessageTrigger:"ENC",encryptScanDelay:1e3,encryptMode:7,encryptBlockMode:"CBC",encodeAll:!0,paddingMode:"PKC7",passList:{},up1Host:"https://share.riseup.net",up1ApiKey:"59Mnk5nY6eCn4bi9GvfOXhMH54E7Bh6EMJXtyJfs",timedMessages:[],timedMessageExpires:0}}configExists(){let e=bdPluginStorage.get(this.getName(),"config");return e&&null!==e&&""!==e}loadConfig(){discordCrypt.log("Loading configuration file ...");let e=bdPluginStorage.get(this.getName(),"config");if(!e||null===e||""===e)return this.configFile=this.getDefaultConfig(),this.saveConfig(),!0;try{this.configFile=JSON.parse(discordCrypt.aes256_decrypt_gcm(e.data,this.masterPassword,"PKC7","utf8",!1))}catch(e){return discordCrypt.log(`Decryption of configuration file failed - ${e}`,"error"),!1}if(!this.configFile||!this.configFile.version)return discordCrypt.log("Decryption of configuration file failed.","error"),!1;let t=this.getDefaultConfig(),r=!1;for(let e in t)this.configFile.hasOwnProperty(e)||(this.configFile[e]=t[e],discordCrypt.log(`Default value added for missing property '${e}' in the configuration file.`),r=!0);for(let e in this.configFile)t.hasOwnProperty(e)||(delete this.configFile[e],discordCrypt.log(`Removing unknown property '${e}' from the configuration file.`),r=!0);if(this.configFile.version!==this.getVersion()){let e=this.configFile.version,t=this.configFile.passList;this.configFile=this.getDefaultConfig(),this.configFile.passList=t,r=!0,discordCrypt.log(`Updated plugin version from v${e} to v${this.getVersion()}.`)}return r&&this.saveConfig(),discordCrypt.log(`Loaded configuration file! - v${this.configFile.version}`),!0}saveConfig(){bdPluginStorage.set(this.getName(),"config",{data:discordCrypt.aes256_encrypt_gcm(JSON.stringify(this.configFile),this.masterPassword,"PKC7",!1)})}saveSettings(e){this.saveConfig(),this.decodeMessages(!0),e&&(e.text("Saved & Applied!"),setTimeout(function(){e.text("Save & Apply")},1e3))}resetSettings(e){let t=this.configFile.passList;this.configFile=this.getDefaultConfig(),this.configFile.passList=t,this.saveConfig(),this.decodeMessages(!0),e&&(e.text("Restored Default Settings!"),setTimeout(function(){e.text("Reset Settings")},1e3))}updatePasswords(){if("block"!==$("#dc-overlay-password").css("display"))return;let e=$("#dc-password-primary"),t=$("#dc-password-secondary");""!==e.val()&&e.val().length>1?(this.configFile.passList[discordCrypt.getChannelId()]=discordCrypt.createPassword(e.val(),""),""!==t.val()&&t.val().length>1&&(this.configFile.passList[discordCrypt.getChannelId()].secondary=t.val()),e.val(""),t.val("")):delete this.configFile.passList[discordCrypt.getChannelId()],this.saveConfig(),this.decodeMessages(!0)}hookMessageCallbacks(){if(this.messageUpdateDispatcher||(this.messageUpdateDispatcher=discordCrypt.getWebpackModuleSearcher().findByDispatchNames(["LOAD_MESSAGES","LOAD_MESSAGES_SUCCESS","LOAD_MESSAGES_FAILURE","TRUNCATE_MESSAGES","MESSAGE_CREATE","MESSAGE_UPDATE","MESSAGE_DELETE","MESSAGE_DELETE_BULK","MESSAGE_REVEAL","CHANNEL_SELECT","CHANNEL_CREATE","CHANNEL_PRELOAD","GUILD_CREATE","GUILD_SELECT","GUILD_DELETE"])),!this.messageUpdateDispatcher)return discordCrypt.log("Failed to locate the switch event dispatcher!","error"),!1;discordCrypt.hookDispatcher(this.messageUpdateDispatcher,"CHANNEL_SELECT",{after:e=>{discordCrypt.getChannelId()===e.methodArguments[0].channelId&&setTimeout(()=>{discordCrypt.log("Detected chat switch.","debug"),this.loadToolbar(),this.attachHandler(),this.decodeMessages()},1)}});let e={after:e=>{discordCrypt.getChannelId()===e.methodArguments[0].channelId&&setTimeout(()=>{this.decodeMessages()},1)}};return discordCrypt.hookDispatcher(this.messageUpdateDispatcher,"MESSAGE_CREATE",e),discordCrypt.hookDispatcher(this.messageUpdateDispatcher,"MESSAGE_UPDATE",e),discordCrypt.hookDispatcher(this.messageUpdateDispatcher,"MESSAGE_DELETE",e),!0}unhookMessageCallbacks(){if(!this.messageUpdateDispatcher)return!1;for(let e in this.messageUpdateDispatcher._actionHandlers)e.hasOwnProperty("__cancel")&&e.__cancel();return!0}loadMasterPassword(){const e=this;if(0!==$("#dc-master-overlay").length)return;const t=this.configExists(),r=t?"Unlock Database":"Create Database";$(document.body).prepend(discordCrypt.__zlibDecompress(this.masterPasswordHtml));const s=$("#dc-db-password"),i=$("#dc-cancel-btn"),a=$("#dc-unlock-database-btn"),o=$("#dc-master-status"),n=$("#dc-header-master-msg"),c=$("#dc-prompt-master-msg");n.text(t?"---------- Database Is Locked ----------":"---------- Database Not Found ----------"),c.text(t?"Enter Password:":"Enter New Password:"),a.text(r),document.getElementById("dc-master-overlay").style.display="block",s.on("keydown",function(e){let t;13===(e.keyCode||e.which)&&a.click()}),a.click(discordCrypt.on_master_unlock_button_clicked(this,a,t,s,r,o)),i.click(discordCrypt.on_master_cancel_button_clicked(this))}checkForUpdates(){const e=this;setTimeout(()=>{try{discordCrypt.checkForUpdate((t,r,s,i)=>{const a=require("path").join(discordCrypt.getPluginsPath(),discordCrypt.getPluginName()),o=require("fs");$("#dc-overlay").css("display","block"),$("#dc-update-overlay").css("display","block"),$("#dc-new-version").text(`New Version: ${""===s?"N/A":s} ( #${r} )`),$("#dc-old-version").text(`Old Version: ${e.getVersion()}`);let n=$("#dc-changelog");n.val("string"==typeof i&&i.length>0?i:"N/A"),n.scrollTop(0),o.writeFile(a,t,e=>{e&&(discordCrypt.log(`Unable to replace the target plugin. ( ${e} )\nDestination: ${a}`,"error"),_alert("Error During Update","Failed to apply the update!"))})})}catch(e){discordCrypt.log(e,"warn")}},1e3)}loadToolbar(){if(!this.configFile)return;if("@me"===discordCrypt.getChannelId())return;if(0!==$("#dc-passwd-btn").length)return;$(this.searchUiClass).parent().parent().parent().prepend(discordCrypt.__zlibDecompress(this.toolbarHtml));let e=$("#dc-passwd-btn"),t=$("#dc-lock-btn"),r=$(".dc-svg");r.attr("class","dc-svg"),t.length>0&&(this.configFile.encodeAll?(t.attr("title","Disable Message Encryption"),t.html(Buffer.from(this.lockIcon,"base64").toString("utf8"))):(t.attr("title","Enable Message Encryption"),t.html(Buffer.from(this.unlockIcon,"base64").toString("utf8"))),r.attr("class","dc-svg")),$(document.body).prepend(discordCrypt.__zlibDecompress(this.settingsMenuHtml)),discordCrypt.set_active_settings_tab(0),discordCrypt.set_active_exchange_tab(0),$("#dc-secondary-cipher").val(discordCrypt.cipherIndexToString(this.configFile.encryptMode,!0)),$("#dc-primary-cipher").val(discordCrypt.cipherIndexToString(this.configFile.encryptMode,!1)),$("#dc-settings-cipher-mode").val(this.configFile.encryptBlockMode.toLowerCase()),$("#dc-settings-padding-mode").val(this.configFile.paddingMode.toLowerCase()),$("#dc-settings-encrypt-trigger").val(this.configFile.encodeMessageTrigger),$("#dc-settings-timed-expire").val(this.configFile.timedMessageExpires),$("#dc-settings-default-pwd").val(this.configFile.defaultPassword),$("#dc-settings-scan-delay").val(this.configFile.encryptScanDelay),$("#dc-embed-enabled").prop("checked",this.configFile.useEmbeds),$("#dc-clipboard-upload-btn").click(discordCrypt.on_upload_encrypted_clipboard_button_clicked(this)),$("#dc-file-btn").click(discordCrypt.on_file_button_clicked),$("#dc-select-file-path-btn").click(discordCrypt.on_alter_file_button_clicked),$("#dc-file-upload-btn").click(discordCrypt.on_upload_file_button_clicked(this)),$("#dc-file-cancel-btn").click(discordCrypt.on_cancel_file_upload_button_clicked),$("#dc-settings-btn").click(discordCrypt.on_settings_button_clicked),$("#dc-plugin-settings-btn").click(discordCrypt.on_plugin_settings_tab_button_clicked),$("#dc-database-settings-btn").click(discordCrypt.on_database_settings_tab_button_clicked(this)),$("#dc-import-database-btn").click(discordCrypt.on_import_database_button_clicked(this)),$("#dc-export-database-btn").click(discordCrypt.on_export_database_button_clicked(this)),$("#dc-erase-entries-btn").click(discordCrypt.on_clear_entries_button_clicked(this)),$("#dc-exit-settings-btn").click(discordCrypt.on_settings_close_button_clicked),$("#dc-settings-save-btn").click(discordCrypt.on_save_settings_button_clicked(this)),$("#dc-settings-reset-btn").click(discordCrypt.on_reset_settings_button_clicked(this)),$("#dc-restart-now-btn").click(discordCrypt.on_restart_now_button_clicked),$("#dc-restart-later-btn").click(discordCrypt.on_restart_later_button_clicked),$("#dc-tab-info-btn").click(discordCrypt.on_info_tab_button_clicked),$("#dc-tab-keygen-btn").click(discordCrypt.on_exchange_tab_button_clicked),$("#dc-tab-handshake-btn").click(discordCrypt.on_handshake_tab_button_clicked),$("#dc-exit-exchange-btn").click(discordCrypt.on_close_exchange_button_clicked),$("#dc-exchange-btn").click(discordCrypt.on_open_exchange_button_clicked),$("#dc-quick-exchange-btn").click(discordCrypt.on_quick_send_public_key_button_clicked),$("#dc-keygen-method").change(discordCrypt.on_exchange_algorithm_changed),$("#dc-keygen-gen-btn").click(discordCrypt.on_generate_new_key_pair_button_clicked),$("#dc-keygen-clear-btn").click(discordCrypt.on_keygen_clear_button_clicked),$("#dc-keygen-send-pub-btn").click(discordCrypt.on_keygen_send_public_key_button_clicked(this)),$("#dc-handshake-paste-btn").click(discordCrypt.on_handshake_paste_public_key_button_clicked),$("#dc-handshake-compute-btn").click(discordCrypt.on_handshake_compute_button_clicked(this)),$("#dc-handshake-cpy-keys-btn").click(discordCrypt.on_handshake_copy_keys_button_clicked),$("#dc-handshake-apply-keys-btn").click(discordCrypt.on_handshake_apply_keys_button_clicked(this)),e.click(discordCrypt.on_passwd_button_clicked),$("#dc-save-pwd").click(discordCrypt.on_save_passwords_button_clicked(this)),$("#dc-reset-pwd").click(discordCrypt.on_reset_passwords_button_clicked(this)),$("#dc-cancel-btn").click(discordCrypt.on_cancel_password_button_clicked),$("#dc-cpy-pwds-btn").click(discordCrypt.on_copy_current_passwords_button_clicked(this)),t.click(discordCrypt.on_lock_button_clicked(this))}attachHandler(){const e=this;let t=$(this.channelTextAreaClass);1===t.length&&t.off("keydown.dcrypt").on("keydown.dcrypt",function(t){let r=t.keyCode||t.which;e.configFile&&13===r&&(t.shiftKey||$(e.autoCompleteClass)[0]||e.sendEncryptedMessage($(this).val())&&(discordCrypt.__getElementReactOwner($("form")[0]).setState({textValue:""}),t.preventDefault(),t.stopPropagation()))})}parseKeyMessage(e){let t=discordCrypt.__extractKeyInfo(e.text().replace(/\r?\n|\r/g,""),!0);if(null===t)return!0;let r=discordCrypt.sha256(Buffer.from($("#dc-pub-key-ta").val(),"hex"),"hex");if(t.fingerprint===r)return e.css("display","none"),!0;let s=$("<button>Perform Key Exchange</button>").addClass("dc-button").addClass("dc-button-inverse");return s.css("margin-left","0"),s.css("margin-right","0"),s.css("margin-top","2%"),s.css("width","100%"),s.click(function(){let r=$("#dc-keygen-method"),s=$("#dc-keygen-algorithm");$("#dc-exchange-btn").click(),r.val()!==t.algorithm||parseInt(s.val())!==t.bit_length?(r.val(t.algorithm),r.change(),s.val(t.bit_length),$("#dc-keygen-gen-btn").click(),$("#dc-keygen-send-pub-btn").click()):""===$("#dc-pub-key-ta").val()&&($("#dc-keygen-gen-btn").click(),$("#dc-keygen-send-pub-btn").click()),$("#dc-tab-handshake-btn").click(),$("#dc-handshake-ppk").val(e.text()),$("#dc-handshake-compute-btn").click()}),e.parent().append(s),e.css("color","blue"),!0}parseSymmetric(e,t,r,s,i){let a=$(e),o;if(a.text().length<=12)return!1;let n=a.text().slice(0,4);if(n===this.encodedKeyHeader)return this.parseKeyMessage(a);if(n!==this.encodedMessageHeader)return!1;let c=discordCrypt.metaDataDecode(a.text().slice(4,8));if(c[0]>=this.encryptModes.length)return!1;if(c[1]>=this.encryptBlockModes.length)return!1;if(c[2]>=this.paddingModes.length)return!1;if(("string"==typeof(o=discordCrypt.symmetricDecrypt(a.text().replace(/\r?\n|\r/g,"").substr(8),t,r,c[0],c[1],c[2],!0))||o instanceof String)&&""!==o){if(s&&a.parent().parent().parent().parent().css("max-width","100%"),o=this.postProcessMessage(o,this.configFile.up1Host),s)a.html(o.html);else{let e=a.parent();a.parent().html(o.html),a=$(e)}if(o.code)if(null!==i.HighlightJS){let e=$(a.children()[0]).children();for(let t=0;t<e.length;t++)i.HighlightJS.highlightBlock($(e[t]).children()[0]),$(e[t]).children().addClass("hljs")}else discordCrypt.log("Could not locate HighlightJS module!","error");a.css("color","green")}else 1===o?a.text("[ ERROR ] AUTHENTICATION OF CIPHER TEXT FAILED !!!"):2===o?a.text("[ ERROR ] FAILED TO DECRYPT CIPHER TEXT !!!"):a.text("[ ERROR ] DECRYPTION FAILURE. INVALID KEY OR MALFORMED MESSAGE !!!"),a.css("color","red");return!0}postProcessMessage(e,t){const r={"&":"&amp;","<":"&lt",">":"&gt;"};e=e.replace(/[&<>]/g,e=>r[e]);let s=discordCrypt.__buildCodeBlockMessage(e),i=s.code,a;return{url:(s=discordCrypt.__buildUrlMessage(s.html,t)).url,code:i,html:s.html}}decodeMessages(){if(!this.configFile||!this.configFile.version)return;const e=this;let t=discordCrypt.getChannelId(),r=Buffer.from(this.configFile.passList[t]&&this.configFile.passList[t].primary?this.configFile.passList[t].primary:this.configFile.defaultPassword),s=Buffer.from(this.configFile.passList[t]&&this.configFile.passList[t].secondary?this.configFile.passList[t].secondary:this.configFile.defaultPassword),i=discordCrypt.getReactModules(this.cachedModules);$(this.messageMarkupClass).each(function(){this.className.includes("embedDescription")&&void 0===$(this).data("dc-parsed")&&(e.parseSymmetric(this,r,s,!0,i),$(this).data("dc-parsed",!0))}),$(`${this.messageMarkupClass} .inline`).each(function(){void 0===$(this).data("dc-parsed")&&(e.parseSymmetric(this,r,s,!1,i),$(this).data("dc-parsed",!0))})}sendEncryptedMessage(e,t=!1,r){const s=1820,i=["#","/",":"],a=require("crypto");let o;if(-1!==i.indexOf(e[0]))return!1;if(!1!==t||this.configFile.passList[discordCrypt.getChannelId()]&&this.configFile.passList[discordCrypt.getChannelId()].primary&&this.configFile.encodeAll)o=e;else{if((e=e.split("|")).length<=0)return!1;if(e[e.length-1]!==this.configFile.encodeMessageTrigger)return!1;o=e[0]}if(0===o.length)return!1;let n=discordCrypt.__extractTags(o);0!==n[0].length&&(o=n[0]);let c=n[1].length>0?n[1]:"",d=Buffer.from(this.configFile.passList[discordCrypt.getChannelId()]?this.configFile.passList[discordCrypt.getChannelId()].primary:this.configFile.defaultPassword),l=Buffer.from(this.configFile.passList[discordCrypt.getChannelId()]?this.configFile.passList[discordCrypt.getChannelId()].secondary:this.configFile.defaultPassword);if(o.length+16<1820){let e=discordCrypt.symmetricEncrypt(o,d,l,this.configFile.encryptMode,this.configFile.encryptBlockMode,this.configFile.paddingMode,!0);e=(e=this.encodedMessageHeader+discordCrypt.metaDataEncode(this.configFile.encryptMode,this.configFile.encryptBlockMode,this.configFile.paddingMode,parseInt(a.pseudoRandomBytes(1)[0]))+e).replace(/(.{32})/g,e=>`${e}\n`),discordCrypt.dispatchMessage(this.configFile.useEmbeds,e,this.messageHeader,`v${this.getVersion().replace("-debug","")}`,5577355,c,r,this.cachedModules,this.configFile.timedMessages,this.configFile.timedMessageExpires)}else{let e=discordCrypt.__splitStringChunks(o,1820);for(let t=0;t<e.length;t++){let s=discordCrypt.symmetricEncrypt(e[t],d,l,this.configFile.encryptMode,this.configFile.encryptBlockMode,this.configFile.paddingMode,!0);s=(s=this.encodedMessageHeader+discordCrypt.metaDataEncode(this.configFile.encryptMode,this.configFile.encryptBlockMode,this.configFile.paddingMode,parseInt(a.pseudoRandomBytes(1)[0]))+s).replace(/(.{32})/g,e=>`${e}\n`),discordCrypt.dispatchMessage(this.configFile.useEmbeds,s,this.messageHeader,`v${this.getVersion().replace("-debug","")}`,5577355,0===t?c:"",r,this.cachedModules,this.configFile.timedMessages,this.configFile.timedMessageExpires)}}return this.saveConfig(),!0}static on_master_unlock_button_clicked(e,t,r,s,i,a){return()=>{t.attr("disabled",!0),r?t.text("Unlocking Database ..."):t.text("Creating Database ...");let o=s.val();if(null===o||""===o)return t.text(i),void t.attr("disabled",!1);discordCrypt.scrypt(Buffer.from(o),Buffer.from(discordCrypt.whirlpool(o,!0),"hex"),32,4096,8,1,(o,n,c)=>{if(o)return r?t.text("Invalid Password!"):t.text(`Error: ${o}`),s.val(""),a.css("width","0%"),setTimeout(function(){t.text(i)},1e3),discordCrypt.log(o.toString(),"error"),!0;if(n&&a.css("width",`${parseInt(100*n)}%`),c){if(e.masterPassword=Buffer.from(c,"hex"),!e.loadConfig())return e.configFile=null,r?t.text("Invalid Password!"):t.text("Failed to create the database!"),s.val(""),a.css("width","0%"),setTimeout(function(){t.text(i)},1e3),t.attr("disabled",!1),!1;e.start(),r?t.text("Unlocked Successfully!"):t.text("Created Successfully!"),setTimeout(function(){$("#dc-master-overlay").remove()},1e3)}return!1})}}static on_master_cancel_button_clicked(e){return()=>{setTimeout(function(){$("#dc-master-overlay").remove(),e.masterPassword=null,e.configFile=null},300)}}static on_file_button_clicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-upload").css("display","block")}static on_alter_file_button_clicked(){let e=require("electron").remote.dialog.showOpenDialog({title:"Select a file to encrypt and upload",buttonLabel:"Select",message:"Maximum file size is 50 MB",properties:["openFile","showHiddenFiles","treatPackageAsDirectory"]});e.length&&e[0].length&&$("#dc-file-path").val(e[0])}static on_upload_encrypted_clipboard_button_clicked(e){return()=>{let t=discordCrypt.getChannelId();discordCrypt.__up1UploadClipboard(e.configFile.up1Host,e.configFile.up1ApiKey,global.sjcl,(r,s,i)=>{null===r&&"string"==typeof s&&"string"==typeof i?(e.sendEncryptedMessage(`${s}`,!0,t),require("electron").clipboard.writeText(`Delete URL: ${i}`)):_alert("Failed to upload the clipboard!",r)})}}static on_upload_file_button_clicked(e){return()=>{const t=require("original-fs");let r=$("#dc-file-path"),s=$("#dc-file-upload-btn"),i=$("#dc-file-message-textarea"),a=$("#dc-file-deletion-checkbox").is(":checked"),o=$("#dc-file-name-random-checkbox").is(":checked");i.val().length>0&&e.sendEncryptedMessage(i.val(),!0);let n=discordCrypt.getChannelId();i.val(""),t.existsSync(r.val())?(s.text("Uploading ..."),s.addClass("dc-button-inverse"),discordCrypt.__up1UploadFile(r.val(),e.configFile.up1Host,e.configFile.up1ApiKey,global.sjcl,(t,i,o)=>{if(null!==t||"string"!=typeof i||"string"!=typeof o)return s.text("Failed to upload the file!"),discordCrypt.log(t,"error"),r.val(""),void setTimeout(()=>{s.text("Upload"),s.removeClass("dc-button-inverse")},1e3);e.sendEncryptedMessage(`${i}${a?"\n\nDelete URL: "+o:""}`,!0,n),r.val(""),s.text("Upload Successful!"),setTimeout(()=>{s.text("Upload"),s.removeClass("dc-button-inverse"),$("#dc-file-cancel-btn").click()},1e3)},o)):r.val("")}}static on_cancel_file_upload_button_clicked(){$("#dc-file-path").val(""),$("#dc-overlay").css("display","none"),$("#dc-overlay-upload").css("display","none")}static on_settings_button_clicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-settings").css("display","block")}static on_plugin_settings_tab_button_clicked(){discordCrypt.set_active_settings_tab(0)}static on_database_settings_tab_button_clicked(e){return()=>{let t,r,s,i;(i=$("#dc-database-entries")).html(""),t=e.cachedModules.UserResolver.getUsers(),r=e.cachedModules.GuildResolver.getGuilds(),s=e.cachedModules.ChannelResolver.getChannels();for(let a in e.configFile.passList){let o,n=a;if(!s[n])continue;if(0===s[n].type){let e;o=`${r[s[n].guild_id].name} @ #${s[n].name}`}else{if(1!==s[n].type)continue;{let e=t[s[n].recipients[0]];o=`DM @${e.username}#${e.discriminator}`}}let c=$(`<tr><td>${n}</td><td>${o}</td><td><div style="display:flex;"></div></td></tr>`),d=$("<button>").addClass("dc-button dc-button-small dc-button-inverse").text("Delete"),l=$("<button>").addClass("dc-button dc-button-small dc-button-inverse").text("Copy");d.click(function(){delete e.configFile.passList[n],e.saveConfig(),d.parent().parent().remove()}),l.click(function(){let t=e.configFile.passList[n];require("electron").clipboard.writeText(`Primary Key: ${t.primary}\n\nSecondary Key: ${t.secondary}`),l.text("Copied"),setTimeout(()=>{l.text("Copy")},1e3)}),$($(c.children()[2]).children()[0]).append(l),$($(c.children()[2]).children()[0]).append(d),i.append(c)}discordCrypt.set_active_settings_tab(1)}}static on_import_database_button_clicked(e){return()=>{const t=require("fs");let r=require("electron").remote.dialog.showOpenDialog({title:"Import Database",message:"Select the configuration file(s) to import",buttonLabel:"Import",filters:[{name:"Database Entries ( *.json )",extensions:["json"]}],properties:["openFile","multiSelections","showHiddenFiles","treatPackageAsDirectory"]});if(!r.length)return;let s=$("#dc-import-database-btn"),i=0;s.text(`Importing ( ${r.length} ) File(s)`);for(let s=0;s<r.length;s++){let a=r[s],o;if(t.statSync(a).isFile()){try{o=JSON.parse(t.readFileSync(a).toString())}catch(e){discordCrypt.log(`Error reading JSON file '${a} ...`,"warn");continue}if(o.discordCrypt_entries&&o.discordCrypt_entries.length)for(let t=0;t<o.discordCrypt_entries.length;t++){let r=o.discordCrypt_entries[t];r.id&&r.primary&&r.secondary&&(e.configFile.passList.hasOwnProperty(r.id)||i++,e.configFile.passList[r.id]=discordCrypt.createPassword(r.primary,r.secondary))}}}setTimeout(()=>{s.text(`Imported (${i}) ${1===i?"Entry":"Entries"}`),setTimeout(()=>{s.text("Import Database(s)")},1e3)},500),0!==i&&(discordCrypt.on_database_settings_tab_button_clicked(e)(),e.saveConfig())}}static on_export_database_button_clicked(e){return()=>{let t=require("electron").remote.dialog.showSaveDialog({title:"Export Database",message:"Select the destination file",buttonLabel:"Export",filters:[{name:"Database Entries ( *.json )",extensions:["json"]}]});if(!t.length)return;const r=require("fs");let s=$("#dc-export-database-btn"),i={discordCrypt_entries:[]},a;for(let t in e.configFile.passList){let r=e.configFile.passList[t];i.discordCrypt_entries.push({id:t,primary:r.primary,secondary:r.secondary})}a=i.discordCrypt_entries.length;try{r.writeFileSync(t,JSON.stringify(i,null,"    ")),s.text(`Exported (${a}) ${1===a?"Entry":"Entries"}`)}catch(e){discordCrypt.log(`Error exporting entries: ${e.toString()}`,"error"),s.text("Error: See Console")}setTimeout(()=>{s.text("Export Database")},1e3)}}static on_clear_entries_button_clicked(e){return()=>{let t=$("#dc-erase-entries-btn");e.configFile.passList={},$("#dc-database-entries").html(""),e.saveConfig(),t.text("Cleared Entries"),setTimeout(()=>{t.text("Erase Entries")},1e3)}}static on_settings_close_button_clicked(){discordCrypt.set_active_settings_tab(0),$("#dc-overlay").css("display","none"),$("#dc-overlay-settings").css("display","none")}static on_save_settings_button_clicked(e){return()=>{let t=$("#dc-primary-cipher"),r=$("#dc-secondary-cipher"),s=$("#dc-master-password");if(e.configFile.encodeMessageTrigger=$("#dc-settings-encrypt-trigger").val(),e.configFile.timedMessageExpires=$("#dc-settings-timed-expire").val(),e.configFile.encryptBlockMode=$("#dc-settings-cipher-mode").val(),e.configFile.defaultPassword=$("#dc-settings-default-pwd").val(),e.configFile.encryptScanDelay=$("#dc-settings-scan-delay").val(),e.configFile.paddingMode=$("#dc-settings-padding-mode").val(),e.configFile.useEmbeds=$("#dc-embed-enabled").is(":checked"),e.configFile.encryptMode=discordCrypt.cipherStringToIndex(t.val(),r.val()),t.val(discordCrypt.cipherIndexToString(e.configFile.encryptMode,!1)),r.val(discordCrypt.cipherIndexToString(e.configFile.encryptMode,!0)),""!==s.val()){let t=s.val();s.val(""),discordCrypt.scrypt(Buffer.from(t),Buffer.from(discordCrypt.whirlpool(t,!0),"hex"),32,4096,8,1,(t,r,s)=>t?(_alert("DiscordCrypt Error","Error setting the new database password. Check the console for more info."),discordCrypt.log(t.toString(),"error"),!0):(s&&(e.masterPassword=Buffer.from(s,"hex"),e.saveSettings($("#dc-settings-save-btn"))),!1))}else e.saveSettings($("#dc-settings-save-btn"))}}static on_reset_settings_button_clicked(e){return()=>{e.resetSettings($("#dc-settings-reset-btn")),$("#dc-secondary-cipher").val(discordCrypt.cipherIndexToString(e.configFile.encryptMode,!0)),$("#dc-primary-cipher").val(discordCrypt.cipherIndexToString(e.configFile.encryptMode,!1)),$("#dc-settings-cipher-mode").val(e.configFile.encryptBlockMode.toLowerCase()),$("#dc-settings-padding-mode").val(e.configFile.paddingMode.toLowerCase()),$("#dc-settings-encrypt-trigger").val(e.configFile.encodeMessageTrigger),$("#dc-settings-timed-expire").val(e.configFile.timedMessageExpires),$("#dc-settings-default-pwd").val(e.configFile.defaultPassword),$("#dc-settings-scan-delay").val(e.configFile.encryptScanDelay),$("#dc-embed-enabled").prop("checked",e.configFile.useEmbeds),$("#dc-master-password").val("")}}static on_restart_now_button_clicked(){location.reload()}static on_restart_later_button_clicked(){$("#dc-overlay").css("display","none"),$("#dc-update-overlay").css("display","none")}static on_info_tab_button_clicked(){discordCrypt.set_active_exchange_tab(0)}static on_exchange_tab_button_clicked(){discordCrypt.set_active_exchange_tab(1)}static on_handshake_tab_button_clicked(){discordCrypt.set_active_exchange_tab(2)}static on_close_exchange_button_clicked(){$("#dc-overlay").css("display","none"),$("#dc-overlay-exchange").css("display","none")}static on_open_exchange_button_clicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-exchange").css("display","block")}static on_quick_send_public_key_button_clicked(){$("#dc-keygen-gen-btn").click(),$("#dc-keygen-send-pub-btn").click()}static on_exchange_algorithm_changed(){let e=discordCrypt.getDHBitSizes(),t=discordCrypt.getECDHBitSizes(),r=$("#dc-keygen-method"),s=$("#dc-keygen-algorithm");switch($("#dc-keygen-algorithm option").each(function(){$(this).remove()}),r.val()){case"dh":for(let t=0;t<e.length;t++){let r=e[t];s.append(new Option(r,r,t===e.length-1))}break;case"ecdh":for(let e=0;e<t.length;e++){let r=t[e];$("#dc-keygen-algorithm").append(new Option(r,r,e===t.length-1))}break;default:return}}static on_generate_new_key_pair_button_clicked(){let e=discordCrypt.getDHBitSizes(),t=discordCrypt.getECDHBitSizes(),r=32,s=16,i,a,o,n,c,d=require("crypto"),l=$("#dc-keygen-method"),p=$("#dc-keygen-algorithm");switch(l.val()){case"dh":c=discordCrypt.generateDH(parseInt(p.val())),a=e.indexOf(parseInt(p.val()));break;case"ecdh":c=discordCrypt.generateECDH(parseInt(p.val())),a=t.indexOf(parseInt(p.val()))+e.length;break;default:return}c&&void 0!==c&&void 0!==c.getPrivateKey&&void 0!==c.getPublicKey&&(discordCrypt.privateExchangeKey=c,i=parseInt(d.randomBytes(1).toString("hex"),16)%16+16,n=Buffer.from(c.getPublicKey("hex","ecdh"===l.val()?"compressed":void 0),"hex"),(o=Buffer.alloc(2+i+n.length)).writeInt8(a,0),o.writeInt8(i,1),d.randomBytes(i).copy(o,2),n.copy(o,2+i),$("#dc-pub-key-ta").val(o.toString("hex")),$("#dc-priv-key-ta").val(c.getPrivateKey("hex")))}static on_keygen_clear_button_clicked(){$("#dc-pub-key-ta").val(""),$("#dc-priv-key-ta").val("")}static on_keygen_send_public_key_button_clicked(e){return()=>{let t=$("#dc-pub-key-ta");if(""===t.val())return;let r=Buffer.from(t.val(),"hex"),s=(r=e.encodedKeyHeader+discordCrypt.substituteMessage(r,!0)).replace(/(.{32})/g,e=>`${e}\n`),i=`${"ecdh"!==$("#dc-keygen-method").val()?"DH-":"ECDH-"}`+`${$("#dc-keygen-algorithm").val()}`,a=`-----BEGIN ${i} PUBLIC KEY-----`,o=`-----END ${i} PUBLIC KEY----- | v${e.getVersion().replace("-debug","")}`;discordCrypt.dispatchMessage(e.configFile.useEmbeds,s,a,o,7471104,"",void 0,e.cachedModules,e.configFile.timedMessages,e.configFile.timedMessageExpires),e.saveConfig(),$("#dc-keygen-send-pub-btn").text("Sent The Public Key!"),setTimeout(function(){$("#dc-keygen-send-pub-btn").text("Send Public Key")},1e3)}}static on_handshake_paste_public_key_button_clicked(){$("#dc-handshake-ppk").val(require("electron").clipboard.readText())}static on_handshake_compute_button_clicked(e){return()=>{let t,r,s,i,a,o,n,c,d=$("#dc-pub-key-ta"),l=$("#dc-priv-key-ta"),p=$("#dc-handshake-ppk"),u=$("#dc-handshake-compute-btn");function g(e){const t=discordCrypt.getBraille().splice(16,64);let r="";for(let s=0;s<parseInt(e.length/2);s++)r+=t[parseInt(e.substr(2*s,2))&t.length-1];return r}if(!p.val()||!p.val().length)return;if(!d.val()||!d.val().length)return u.text("You Didn't Generate A Key!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);if(p.val().replace(/\r?\n|\r/g,"").slice(0,4)!==e.encodedKeyHeader)return;let h=p.val().replace(/\r?\n|\r/g,"").slice(4);if(!discordCrypt.isValidBraille(h))return;try{t=Buffer.from(discordCrypt.substituteMessage(h),"hex")}catch(e){return u.text("Invalid Public Key!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3)}if(r=t.readInt8(0),!discordCrypt.isValidExchangeAlgorithm(r))return u.text("Invalid Algorithm!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);let y=Buffer.from(d.val(),"hex");if(y.readInt8(0)!==r)return u.text("Mismatched Algorithm!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);if($("#dc-handshake-algorithm").text(`Exchange Algorithm: ${discordCrypt.indexToExchangeAlgorithmString(r)}`),(i=t.readInt8(1))<16||i>32)return u.text("Invalid Salt Length!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);if(a=Buffer.from(t.subarray(2,2+i)),o=y.readInt8(1),n=Buffer.from(y.subarray(2,2+o)),$("#dc-handshake-salts").text(`Salts: [ ${g(a.toString("hex"))}, `+`${g(n.toString("hex"))} ]`),s=Buffer.from(t.subarray(2+i)).toString("hex"),!discordCrypt.privateExchangeKey||void 0===discordCrypt.privateExchangeKey||void 0===discordCrypt.privateExchangeKey.computeSecret)return u.text("Failed To Calculate Private Key!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);let f=discordCrypt.computeExchangeSharedSecret(discordCrypt.privateExchangeKey,s,!1,!1);if(!f||!f.length)return u.text("Failed To Derive Key!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);if($("#dc-handshake-secret").text(`Derived Secret: [ ${g(f.length>64?f.substring(0,64):f)} ]`),o===i){for(let e=2;e<parseInt(o/4);e+=4){let t=n.readUInt32BE(e),r=a.readUInt32BE(e);if(t!==r){c=t>r;break}}if(void 0===c)return u.text("Both Salts Are Equal ?!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3)}else c=o>i;let m=Buffer.from(discordCrypt.sha512(c?n:a,!0),"hex"),b=Buffer.from(discordCrypt.whirlpool(c?a:n,!0),"hex"),C=0,k=0;discordCrypt.scrypt(Buffer.from(f+b.toString("hex"),"hex"),m,256,3072,16,2,(e,t,r)=>e?(u.text("Failed Generating Primary Key!"),setTimeout(function(){u.text("Compute Secret Keys")},1e3),!0):(t&&(C=50*t,$("#dc-exchange-status").css("width",`${parseInt(C+k)}%`)),r&&($("#dc-handshake-prim-lbl").text(`Primary Key: ( Quality - ${discordCrypt.entropicBitLength(r.toString("base64"))} Bits )`),$("#dc-handshake-primary-key").val(r.toString("base64")),u.text("Compute Secret Keys"),$("#dc-handshake-algorithm").text("..."),$("#dc-handshake-secret").text("..."),$("#dc-handshake-salts").text("..."),$("#dc-exchange-status").css("width","0%")),!1));let v=c?n:a,x=c?a:n,w=Buffer.from(v.toString("hex")+f+x.toString("hex"),"hex");discordCrypt.scrypt(w,b,256,3072,8,1,(e,t,r)=>e?(u.text("Failed Generating Secondary Key!"),setTimeout(function(){u.text("Compute Secret Keys")},1e3),!0):(t&&(k=50*t,$("#dc-exchange-status").css("width",`${parseInt(C+k)}%`)),r&&($("#dc-handshake-sec-lbl").text(`Secondary Key: ( Quality - ${discordCrypt.entropicBitLength(r.toString("base64"))} Bits )`),$("#dc-handshake-secondary-key").val(r.toString("base64"))),!1)),u.text("Generating Keys ..."),discordCrypt.privateExchangeKey=void 0,p.val(""),l.val(""),d.val("")}}static on_handshake_copy_keys_button_clicked(){let e=$("#dc-handshake-primary-key"),t=$("#dc-handshake-secondary-key");""!==e.val()&&""!==t.val()&&(require("electron").clipboard.writeText(`Primary Key: ${e.val()}\r\n\r\n`+`Secondary Key: ${t.val()}`),e.val(""),t.val(""),$("#dc-handshake-cpy-keys-btn").text("Coped Keys To Clipboard!"),setTimeout(function(){$("#dc-handshake-cpy-keys-btn").text("Copy Keys & Nuke"),$("#dc-handshake-prim-lbl").text("Primary Key: "),$("#dc-handshake-sec-lbl").text("Secondary Key: ")},1e3))}static on_handshake_apply_keys_button_clicked(e){return()=>{let t=$("#dc-handshake-primary-key"),r=$("#dc-handshake-secondary-key");if(!t.val()||!t.val().length)return;if(!r.val()||!r.val().length)return;let s=discordCrypt.createPassword(t.val(),r.val());t.val(""),r.val(""),e.configFile.passList[discordCrypt.getChannelId()]=s,e.saveConfig(),$("#dc-handshake-apply-keys-btn").text("Applied & Saved!"),setTimeout(function(){$("#dc-handshake-apply-keys-btn").text("Apply Generated Passwords"),$("#dc-handshake-prim-lbl").text("Primary Key: "),$("#dc-handshake-sec-lbl").text("Secondary Key: "),$("#dc-overlay").css("display","none"),$("#dc-overlay-exchange").css("display","none"),discordCrypt.set_active_exchange_tab(0)},1e3)}}static on_passwd_button_clicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-password").css("display","block")}static on_save_passwords_button_clicked(e){return()=>{let t=$("#dc-save-pwd");e.updatePasswords(),t.text("Saved!"),setTimeout(function(){t.text("Save Password"),$("#dc-password-primary").val(""),$("#dc-password-secondary").val(""),$("#dc-overlay").css("display","none"),$("#dc-overlay-password").css("display","none")},1e3)}}static on_reset_passwords_button_clicked(e){return()=>{let t=$("#dc-reset-pwd");delete e.configFile.passList[discordCrypt.getChannelId()],e.saveConfig(),t.text("Password Reset!"),setTimeout(function(){t.text("Reset Password"),$("#dc-password-primary").val(""),$("#dc-password-secondary").val(""),$("#dc-overlay").css("display","none"),$("#dc-overlay-password").css("display","none")},1e3)}}static on_cancel_password_button_clicked(){$("#dc-password-primary").val(""),$("#dc-password-secondary").val(""),setTimeout(function(){$("#dc-overlay").css("display","none"),$("#dc-overlay-password").css("display","none")},250)}static on_copy_current_passwords_button_clicked(e){return()=>{let t=e.configFile.passList[discordCrypt.getChannelId()];t?(require("electron").clipboard.writeText(`Primary Key: ${t.primary}\r\n\r\nSecondary Key: ${t.secondary}`),$("#dc-cpy-pwds-btn").text("Copied Keys To Clipboard!"),setTimeout(function(){$("#dc-cpy-pwds-btn").text("Copy Current Passwords!"),$("#dc-cancel-btn").click()},1e3)):require("electron").clipboard.writeText(`Default Password: ${e.configFile.defaultPassword}`)}}static on_lock_button_clicked(e){return()=>{let t=$("#dc-lock-btn");e.configFile.encodeAll?(t.attr("title","Enable Message Encryption"),t.html(Buffer.from(e.unlockIcon,"base64").toString("utf8")),e.configFile.encodeAll=!1):(t.attr("title","Disable Message Encryption"),t.html(Buffer.from(e.lockIcon,"base64").toString("utf8")),e.configFile.encodeAll=!0),$(".dc-svg").attr("class","dc-svg"),e.saveConfig()}}static set_active_settings_tab(e){let t=["dc-plugin-settings-tab","dc-database-settings-tab"],r=$("#dc-settings-tab .dc-tab-link");for(let e=0;e<t.length;e++)$(`#${t[e]}`).css("display","none");switch(r.removeClass("active"),e){case 0:$("#dc-plugin-settings-btn").addClass("active"),$("#dc-plugin-settings-tab").css("display","block");break;case 1:$("#dc-database-settings-btn").addClass("active"),$("#dc-database-settings-tab").css("display","block")}}static set_active_exchange_tab(e){let t=["dc-about-tab","dc-keygen-tab","dc-handshake-tab"],r=$("#dc-exchange-tab .dc-tab-link");for(let e=0;e<t.length;e++)$(`#${t[e]}`).css("display","none");switch(r.removeClass("active"),e){case 0:$("#dc-tab-info-btn").addClass("active"),$("#dc-about-tab").css("display","block");break;case 1:$("#dc-tab-keygen-btn").addClass("active"),$("#dc-keygen-tab").css("display","block");break;case 2:$("#dc-tab-handshake-btn").addClass("active"),$("#dc-handshake-tab").css("display","block")}}static getPluginName(){return"discordCrypt.plugin.js"}static validPluginName(){return require("fs").existsSync(require("path").join(discordCrypt.getPluginsPath(),discordCrypt.getPluginName()))}static getPluginsPath(){const e=require("process");return`${"win32"===e.platform?e.env.APPDATA:"darwin"===e.platform?e.env.HOME+"/Library/Preferences":e.env.HOME+"/.config"}/BetterDiscord/plugins/`}static checkForUpdate(e){const t=`https://gitlab.com/leogx9r/DiscordCrypt/raw/master/build/${discordCrypt.getPluginName()}`,r="https://gitlab.com/leogx9r/DiscordCrypt/raw/master/src/CHANGELOG";if("function"!=typeof e)return!1;try{discordCrypt.__getRequest(t,(t,s,i)=>{if(200!==t){switch(t){case 404:discordCrypt.log("Update URL is broken.","error");break;case 403:discordCrypt.log("Forbidden request when checking for updates.","error");break;default:discordCrypt.log(`Error while fetching update: ${s}`,"error")}return!1}i=i.replace("\r","");let a='//META{"name":"discordCrypt"}*//\n';try{a=require("fs").readFileSync(require("path").join(discordCrypt.getPluginsPath(),discordCrypt.getPluginName())).toString().replace("\r","")}catch(e){discordCrypt.log("Plugin file could not be locally read. Assuming testing version ...","warn")}if(i.split("\n")[0]!==a.split("\n")[0])return discordCrypt.log("Plugin metadata is missing from either the local or update file.","error"),!1;let o=discordCrypt.sha256(a),n=discordCrypt.sha256(i),c=Buffer.from(n,"base64").toString("hex").slice(0,8);if(n===o)return discordCrypt.log(`No Update Needed - #${c}`),!0;let d="";try{d=i.match(/((["'])(\d+\.)(\d+\.)(\*|\d+)(["']))/gi).toString().replace(/(['|"]*['|"])/g,"")}catch(e){discordCrypt.log("Failed to locate the version number in the update ...","warn")}try{discordCrypt.__getRequest(r,(t,r,s)=>{e(i,c,d,200==t?s:"")})}catch(t){return discordCrypt.log("Error fetching the changelog.","warn"),e(i,c,d,""),!1}return!0})}catch(e){return discordCrypt.log(`Error while retrieving update: ${e.toString()}`,"warn"),!1}return!0}static getChannelId(){return window.location.pathname.split("/").pop()}static createPassword(e,t){return{primary:e,secondary:t}}static getWebpackModuleSearcher(){const e="function"==typeof webpackJsonp?webpackJsonp([],{__extra_id__:(e,t,r)=>t.default=r},["__extra_id__"]).default:webpackJsonp.push([[],{__extra_id__:(e,t,r)=>e.exports=r},[["__extra_id__"]]]);delete e.m.__extra_id__,delete e.c.__extra_id__;const t=(t,r)=>{for(let r in e.c)if(e.c.hasOwnProperty(r)){let s=e.c[r].exports;if(s&&s.__esModule&&s.default&&(s=s.default),s&&t(s))return s}if(r){discordCrypt.log("Couldn't find module in existing cache. Loading all modules.","warn");for(let r=0;r<e.m.length;++r)try{let s=e(r);if(s&&s.__esModule&&s.default&&t(s.default))return s.default;if(s&&t(s))return s}catch(e){discordCrypt.log(`Could not load module index ${r} ...`,"warn")}discordCrypt.log("Cannot find React module.","warn")}return null},r=(e,r=!1)=>t(t=>e.every(e=>void 0!==t[e]),r),s=(e,r=!1)=>t(t=>t.displayName===e,r),i=(e,r=!1)=>t(t=>void 0!==t._dispatchToken&&t._dispatchToken===`ID_${e}`&&void 0!==t._actionHandlers,r),a=e=>{for(let t=0;t<500;t++){let r=i(t);if(r&&e.every(e=>r._actionHandlers.hasOwnProperty(e)))return r}return null};return{find:t,findByUniqueProperties:r,findByDisplayName:s,findByDispatchToken:i,findByDispatchNames:a}}static dumpWebpackModuleCallbacks(e=!0){let t=discordCrypt.getWebpackModuleSearcher().findByDispatchToken,r=[];for(let s=0;s<1e3;s++){let i=t(s);if(i){r[s]={};for(let t in i)if("_dependencies"!=t)if("_actionHandlers"==t||"_changeCallbacks"==t){if(!e)continue;r[s][t]={};for(let e in i[t])i._actionHandlers.hasOwnProperty(e)&&(r[s][t][e]=i[t][e].prototype.constructor.toString().split("{")[0])}else r[s][t]=i[t].toString().split("{")[0]}}return r}static getReactModules(e){const t=["@me","activity"];return e?{ChannelProps:-1!==t.indexOf(discordCrypt.getChannelId())?null:discordCrypt.__getElementReactOwner($("form")[0]).props.channel,MessageParser:e.MessageParser,MessageController:e.MessageController,MessageActionTypes:e.MessageActionTypes,MessageDispatcher:e.MessageDispatcher,MessageQueue:e.MessageQueue,UserResolver:e.UserResolver,GuildResolver:e.GuildResolver,ChannelResolver:e.ChannelResolver,HighlightJS:e.HighlightJS}:null}static editMessage(e,t,r,s){s.MessageController.editMessage(e,t,{content:r})}static deleteMessage(e,t,r){r.MessageController.deleteMessage(e,t)}static dispatchMessage(e,t,r,s,i=5577355,a="",o,n={},c,d=0){let l=!1;const p=discordCrypt.getReactModules(n);if("string"==typeof a&&a.length){if(null===p.MessageParser)return void discordCrypt.log("Could not locate the MessageParser module!","error");try{((a=p.MessageParser.parse(p.ChannelProps,a).content).includes("@everyone")||a.includes("@here"))&&(l=!0)}catch(e){a=""}}else a="";let u=void 0!==o?o:discordCrypt.getChannelId();if(null===p.MessageQueue)return void discordCrypt.log("Could not locate the MessageQueue module!","error");if(null===p.MessageController)return void discordCrypt.log("Could not locate the MessageController module!","error");const g=e=>{if(e.ok)p.MessageController.receiveMessage(u,e.body),c&&d>0&&c.push({messageId:e.body.id,channelId:u,expireTime:Date.now()+6e4*d});else if(e.status>=400&&e.status<500&&e.body&&!p.MessageController.sendClydeError(u,e.body.code)){if(discordCrypt.log(`Error sending message: ${e.status}`,"error"),null===p.MessageDispatcher||null===p.MessageActionTypes)return void discordCrypt.log("Could not locate the MessageDispatcher module!","error");p.MessageDispatcher.dispatch({type:p.MessageActionTypes.ActionTypes.MESSAGE_SEND_FAILED,messageId:_nonce,channelId:u})}};if(e){let e=parseInt(require("crypto").pseudoRandomBytes(6).toString("hex"),16);p.MessageQueue.enqueue({type:"send",message:{channelId:u,nonce:e,content:a,mention_everyone:l,tts:!1,embed:{type:"rich",url:"https://gitlab.com/leogx9r/DiscordCrypt",color:i||5577355,output_mime_type:"text/x-html",timestamp:(new Date).toISOString(),encoding:"utf-16",author:{name:r||"-----MESSAGE-----",icon_url:"https://gitlab.com/leogx9r/DiscordCrypt/raw/master/images/encode-logo.png",url:"https://discord.me/discordCrypt"},footer:{text:s||"DiscordCrypt",icon_url:"https://gitlab.com/leogx9r/DiscordCrypt/raw/master/images/app-logo.png"},description:t}}},g)}else[t,a].forEach(e=>{if(!e.length)return;let t=parseInt(require("crypto").pseudoRandomBytes(6).toString("hex"),16);p.MessageQueue.enqueue({type:"send",message:{channelId:u,nonce:t,content:e===a?e:`\`${e}\``,mention_everyone:e===a&&l,tts:!1}},g)})}static injectCSS(e,t){$("head").append($("<style>",{id:e.replace(/^[^a-z]+|[^\w-]+/gi,""),html:t}))}static clearCSS(e){e&&"string"==typeof e&&e.length&&$(`#${e.replace(/^[^a-z]+|[^\w-]+/gi,"")}`).remove()}static hookDispatcher(e,t,r){const{before:s,after:i,instead:a,once:o=!1,silent:n=!1}=r,c=e._actionHandlers[t],d=()=>{n||discordCrypt.log(`Unhooking "${t}" ...`),e[t]=c},l=(e,t)=>(...r)=>{try{return e(...r)}catch(e){discordCrypt.log(`Error occurred in ${t}`,"error")}};return e._actionHandlers[t].__hooked||(n||discordCrypt.log(`Hooking "${t}" ...`),e._actionHandlers[t]=function(){const e={thisObject:this,methodArguments:arguments,cancelPatch:d,originalMethod:c,callOriginalMethod:()=>e.returnValue=e.originalMethod.apply(e.thisObject,e.methodArguments)};if(a){const r=l(a,`${t} called hook via 'instead'.`)(e);void 0!==r&&(e.returnValue=r)}else s&&l(s,`${t} called hook via 'before'.`)(e),e.callOriginalMethod(),i&&l(i,`${t} called hook via 'after'.`)(e);return o&&d(),e.returnValue},e._actionHandlers[t].__hooked=!0,e._actionHandlers[t].__cancel=d),e._actionHandlers[t].__cancel}static log(e,t="info"){try{console[t](`%c[DiscordCrypt]%c - ${e}`,"color: #7f007f; font-weight: bold;","")}catch(e){console.error("[DiscordCrypt] - Error logging message ...")}}static __zlibDecompress(e,t="base64"){return require("zlib").inflateSync(Buffer.from(e,t),{windowBits:15}).toString("utf8")}static __loadLibraries(e){const t=require("vm");for(let r in e){let s=e[r];if(s.requiresBrowser&&"undefined"==typeof window){discordCrypt.log(`Skipping loading of browser-required plugin: ${r} ...`,"warn");continue}if(s.requiresElectron)try{require("electron")}catch(e){discordCrypt.log(`Skipping loading of electron-required plugin: ${r} ...`,"warn");continue}let i=discordCrypt.__zlibDecompress(s.code);s.requiresBrowser||s.requiresElectron?t.runInThisContext(i,{filename:r,displayErrors:!1}):global[r.replace(".js","")]=t.runInNewContext(i,{filename:r,displayErrors:!1})}}static __shouldIgnoreUpdates(e){const t=require("fs"),r=require("path"),s=r.join(discordCrypt.getPluginsPath(),discordCrypt.getPluginName());return t.existsSync(s)&&(t.lstatSync(s).isSymbolicLink()||-1!==e.indexOf("-debug"))}static __getRequest(e,t){try{require("request")(e,(e,r,s)=>{t(r.statusCode,r.statusMessage,s)})}catch(e){t(-1,e.toString())}}static __getElementReactOwner(e,{include:t,exclude:r=["Popout","Tooltip","Scroller","BackgroundFlash"]}={}){if(void 0===e)return;const s=e=>e[Object.keys(e).find(e=>e.startsWith("__reactInternalInstance"))],i=void 0===t,a=i?r:t;function o(e){const t=e.type.displayName||e.type.name||null;return null!==t&&!!(a.includes(t)^i)}for(let t=s(e).return;!_.isNil(t);t=t.return)if(!_.isNil(t)&&!_.isNil(t.stateNode)&&!(t.stateNode instanceof HTMLElement)&&o(t))return t.stateNode}static __extractKeyInfo(e,t=!1){try{let r=[],s=e;return t&&(s=s.slice(4)),s=discordCrypt.substituteMessage(s),s=Buffer.from(s,"hex"),discordCrypt.isValidExchangeAlgorithm(s[0])?(r.fingerprint=discordCrypt.sha256(s,!0),r.bit_length=discordCrypt.indexToAlgorithmBitLength(s[0]),r.algorithm=discordCrypt.indexToExchangeAlgorithmString(s[0]).split("-")[0].toLowerCase(),r):null}catch(e){return null}}static __splitStringChunks(e,t){if(!t||t<0)return e;const r=Math.ceil(e.length/t),s=new Array(r);for(let i=0,a=0;i<r;++i,a+=t)s[i]=e.substr(a,t);return s}static __isValidUserName(e){if("string"!=typeof e)return!1;if("@"!==e[0])return!1;for(let t=1;t<e.length;t++){if(" "===e[t]||"@"===e[t])return!1;if(1!==t&&"#"===e[t]&&e.length-t-1==4)try{let r=e.slice(t+1,t+5);return!isNaN(r)&&parseInt(r,10)==r}catch(e){return!1}}return!1}static __extractTags(e){let t=e.split(" "),r="",s="",i=[];for(let e=0,r=0;e<t.length;e++)this.__isValidUserName(t[e])?(i[r++]=t[e],s+=`${t[e].split("#")[0]} `):-1!==["@everyone","@here","@me"].indexOf(t[e])?(i[r++]=t[e],s+=`${t[e]} `):s+=`${t[e]} `;for(let e=0;e<i.length;e++)r+=`${i[e]} `;return[s.trim(),r.trim()]}static __extractCodeBlocks(e){let t=new RegExp(/^(([ \t]*`{3,4})([^\n]*)([\s\S]+?)(^[ \t]*\2))/gm),r=new RegExp(/(`([^`].*?)`)/g),s,i=[];for(;s=t.exec(e);)i.push({start_pos:s.index,end_pos:s.index+s[1].length,language:0===s[3].trim().length?"text":s[3].trim(),raw_code:s[4],captured_block:s[1]});for(;s=r.exec(e);)i.push({start_pos:s.index,end_pos:s.index+s[0].length,language:"inline",raw_code:e.substr(s.index,s.index+s[0].length).split("`")[1],captured_block:s[0]});return i}static __extractUrls(e){let t=new RegExp(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/gi),r,s=[];for(;r=t.exec(e);)s.push(r[0]);return s}static __buildCodeBlockMessage(e){try{let t=discordCrypt.__extractCodeBlocks(e);if(!t.length)return{code:!1,html:e};for(let r=0;r<t.length;r++)if("inline"!==t[r].language){let s="",i=t[r].raw_code.replace("\r","").split("\n");for(let e=1;e<i.length-1;e++)s+=`<li>${i[e]}</li>`;e=(e=e.split(t[r].captured_block)).join('<div class="markup line-scanned" data-colour="true" style="color: rgb(111, 0, 0);">'+`<pre class="hljs"><code class="dc-code-block hljs \n                        ${"text"===t[r].language?"":t[r].language}"\n                         style="position: relative;">`+`<ol>${s}</ol></code></pre></div>`)}else e=(e=e.split(t[r].captured_block)).join(`<code class="inline">${t[r].raw_code}</code>`);return{code:!0,html:e}}catch(t){return{code:!1,html:e}}}static __buildUrlMessage(e,t){try{let r=discordCrypt.__extractUrls(e);if(!r.length)return{url:!1,html:e};for(let s=0;s<r.length;s++){let i="";e=e.split(r[s]),void 0!==t&&r[s].startsWith(`${t}/#`)&&-1===r[s].indexOf("del?ident=")&&(i=`<iframe src=${r[s]} width="100%" height="400px"></iframe><br/><br/>`),e=e.join(`${i}<a target="_blank" href="${r[s]}">${r[s]}</a>`)}return{url:!0,html:`<span>${e}</span>`}}catch(t){return{url:!1,html:e}}}static __toBuffer(e,t){if(Buffer.isBuffer(e))return e;if("string"==typeof e)return Buffer.from(e,void 0===t?"utf8":t?"hex":"base64");if(Array.isArray(e))return Buffer.from(e);throw"Input is neither an Array(), Buffer() or a string."}static __getFileMimeType(e){let t=require("mime-types").lookup(require("path").extname(e));return!1===t?"application/octet-stream":t}static __clipboardToBuffer(){let e=require("electron").clipboard;if(!e)return{mime_type:"",name:"",data:null};let t=require("original-fs"),r=require("path");if(0===e.availableFormats().length)return{mime_type:"",name:"",data:null};let s=e.availableFormats(),i,a="",o="",n=!1;for(let c=0;c<s.length;c++){let d=s[c].split("/");switch(d[0]){case"image":switch(d[1].toLowerCase()){case"png":i=e.readImage().toPNG();break;case"bmp":case"bitmap":i=e.readImage().toBitmap();break;case"jpg":case"jpeg":i=e.readImage().toJPEG(100)}break;case"text":a=e.readText();try{let e;t.statSync(a).isFile()?(i=t.readFileSync(a),o=r.basename(a),n=!0):i=Buffer.from(a,"utf8")}catch(e){i=Buffer.from(a,"utf8")}}if(i&&i.length>0)return n&&(s[c]=discordCrypt.__getFileMimeType(a)),{mime_type:s[c],name:o,data:i}}return{mime_type:"",name:"",data:null}}static __up1EncryptBuffer(e,t,r,s,i){const a=require("crypto");function o(e){e="string"==typeof e?s.codec.base64url.toBits(e):s.codec.bytes.toBits(e);let t=s.hash.sha512.hash(e);return{seed:e,key:s.bitArray.bitSlice(t,0,256),iv:s.bitArray.bitSlice(t,256,384),ident:s.bitArray.bitSlice(t,384,512)}}function n(e){let t=Buffer.alloc(2*e.length);for(let r=0,s=e.length;r<s;r++)t.writeUInt16BE(e.charCodeAt(r),2*r);return t}try{if(e.length>5e7)return void i("Input size must be < 50 MB.");e=Buffer.concat([n(JSON.stringify({mime:t,name:r})),Buffer.from([0,0]),e]),e=s.codec.bytes.toBits(new Uint8Array(e));let c=o(a.randomBytes(64));e=s.mode.ccm.encrypt(new s.cipher.aes(c.key),e,c.iv),i(null,Buffer.from(s.codec.bytes.fromBits(e)),s.codec.base64url.fromBits(c.ident),s.codec.base64url.fromBits(c.seed))}catch(e){i(e.toString())}}static __up1EncryptFile(e,t,r,s=!1){const i=require("crypto"),a=require("path"),o=require("original-fs");try{if(o.statSync(e).size>5e7)return void r("File size must be < 50 MB.");o.readFile(e,(o,n)=>{null===o?discordCrypt.__up1EncryptBuffer(n,discordCrypt.__getFileMimeType(e),s?i.pseudoRandomBytes(8).toString("hex")+a.extname(e):a.basename(e),t,r):r(o.toString())})}catch(e){r(e.toString())}}static __constructRandomArtImage(e,t,r,s){const i=Buffer.from(discordCrypt.pbkdf2_sha160(e,Buffer.alloc(t+r).fill(0),!0,void 0,void 0,t*r*3,1e3),"hex");let a=Buffer.concat([Buffer.from("BM"),Buffer.from([0,0,0,0]),Buffer.from([0,0]),Buffer.from([0,0]),Buffer.from([26,0,0,0]),Buffer.from([12,0,0,0]),Buffer([t,0]),Buffer([r,0]),Buffer.from([1,0]),Buffer.from([24,0])]);for(let e=0;e<r;e++)a=Buffer.concat([a,i.slice(e*r,e*r+3*t),Buffer.alloc(t%4).fill(0)]);return a=Buffer.concat([a,Buffer.from([0])]),s?`data:image/bmp;base64,${a.toString("base64")}`:a}static __up1UploadClipboard(e,t,r,s,i){let a=void 0===i?discordCrypt.__clipboardToBuffer():i;if(!a.mime_type.length||null===a.data)return void s("Invalid clipboard data.");let o=0===a.name.length?require("crypto").pseudoRandomBytes(16).toString("hex"):a.name;this.__up1EncryptBuffer(a.data,a.mime_type,o,r,(r,i,a,o)=>{if(null!==r)return void s(r);let n=new(require("form-data"));n.append("ident",a),n.append("file",i,{filename:"file",contentType:"text/plain"}),void 0!==t&&"string"==typeof t&&n.append("api_key",t),require("request").post({headers:n.getHeaders(),uri:`${e}/up`,body:n},(t,r,i)=>{try{null!==t?s(t):s(null,`${e}/#${o}`,`${e}/del?ident=${a}&delkey=${JSON.parse(i).delkey}`,o)}catch(e){s(e.toString())}})})}static __up1UploadFile(e,t,r,s,i,a=!1){this.__up1EncryptFile(e,s,(e,s,a,o)=>{if(null!==e)return void i(e);let n=new(require("form-data"));n.append("ident",a),n.append("file",s,{filename:"file",contentType:"text/plain"}),void 0!==r&&"string"==typeof r&&n.append("api_key",r),require("request").post({headers:n.getHeaders(),uri:`${t}/up`,body:n},(e,r,s)=>{try{null!==e?i(e):i(null,`${t}/#${o}`,`${t}/del?ident=${a}&delkey=${JSON.parse(s).delkey}`,o)}catch(e){i(e.toString())}})},a)}static __createHash(e,t,r,s,i){try{const a=require("crypto"),o=s?a.createHmac(t,i):a.createHash(t);return o.update(e),o.digest(r?"hex":"base64")}catch(e){return""}}static __pbkdf2(e,t,r,s,i,a,o,n,c){const d=require("crypto");let l,p;if("object"==typeof e?l=Buffer.isBuffer(e)?e:Array.isArray?Buffer.from(e):Buffer.from(e,void 0===s?"utf8":s?"hex":"base64"):"string"==typeof e&&(l=Buffer.from(e,"utf8")),"object"==typeof t?p=Buffer.isBuffer(t)?t:Array.isArray?Buffer.from(t):Buffer.from(t,void 0===i?"utf8":i?"hex":"base64"):"string"==typeof t&&(p=Buffer.from(t,"utf8")),"function"==typeof a)d.pbkdf2(l,p,c,n,o,(e,t)=>{a(e,e?"":t.toString(r?"hex":"base64"))});else try{return d.pbkdf2Sync(l,p,c,n,o).toString(r?"hex":"base64")}catch(e){throw e}return""}static __padMessage(e,t,r,s,i){let a,o;function n(e,t){return e%t===t?t:t-e%t}function c(e,t,r){if(void 0===r){let r=Buffer.alloc(e.length+t);return e.copy(r),Buffer.alloc(t).fill(t).copy(r,e.length),r}return e.slice(0,e.length-e.readInt8(e.length-1))}function d(e,t,r){if(void 0===r){let r=Buffer.alloc(e.length+t);return e.copy(r),Buffer.alloc(t-1).fill(0).copy(r,e.length),Buffer.alloc(1).fill(t).copy(r,e.length+t-1),r}return e.slice(0,e.length-e.readInt8(e.length-1))}function l(e,t,r){const s=require("crypto");if(void 0===r){let r=Buffer.alloc(e.length+t);return e.copy(r),s.randomBytes(t-1).copy(r,e.length),r.writeUInt8(t,e.length+t-1),r}return e.slice(0,e.length-e.readUInt8(e.length-1))}function p(e,t,r){if(void 0===r){let r=Buffer.alloc(e.length+t);return e.copy(r),Buffer.alloc(1).fill(128).copy(r,e.length),Buffer.alloc(t-1).fill(0).copy(e,e.length+1),r}{let t=e.length-1;for(;t>0&&0===e[t];t--);let r=e.slice(0,t+1);return r.slice(0,r.length-1)}}switch(a=discordCrypt.__toBuffer(e,s),o=i?0:n(a.length,r/8),t.toUpperCase()){case"PKC7":return c(a,o,i);case"ANS2":return d(a,o,i);case"ISO1":return l(a,o,i);case"ISO9":return p(a,o,i);default:return""}}static __isValidCipher(e){const t=require("crypto");let r=!1,s=e.toLowerCase();return t.getCiphers().every(e=>e!==s||(r=!0,!1)),r}static __validateKeyIV(e,t=256,r){let s=t/8;if(e.length!==s){let t;switch(s){case 8:t=discordCrypt.whirlpool64;break;case 16:t=discordCrypt.sha512_128;break;case 20:t=discordCrypt.sha160;break;case 24:t=discordCrypt.whirlpool192;break;case 32:t=discordCrypt.sha256;break;case 64:t=void 0!==r?discordCrypt.sha512:discordCrypt.whirlpool;break;default:throw"Invalid block size specified for key or iv. Only 64, 128, 160, 192, 256 and 512 bit keys are supported."}return Buffer.from(t(e,!0),"hex")}return Buffer.from(e)}static __validateMessage(e,t){try{return discordCrypt.__toBuffer(e,t)}catch(e){throw"exception - Invalid message type."}}static scrypt(e,t,r,s=16384,i=8,a=1,o=null){let n=require("crypto"),c,d;function l(e,t,r,s){return n.pbkdf2Sync(e,t,s,r,"sha256")}function p(e,t,r,s,i){let a,o,n,c;for(a=0,o=16*(2*r-1);a<16;a++)i[a]=e[o+a];for(a=0;a<2*r;a++){for(o=0,n=16*a;o<16;o++)i[o]^=e[n+o];for(o=0;o<16;o++)s[o]=i[o];let r=(e,t)=>e<<t|e>>>32-t;for(o=8;o>0;o-=2)s[4]^=r(s[0]+s[12],7),s[8]^=r(s[4]+s[0],9),s[12]^=r(s[8]+s[4],13),s[0]^=r(s[12]+s[8],18),s[9]^=r(s[5]+s[1],7),s[13]^=r(s[9]+s[5],9),s[1]^=r(s[13]+s[9],13),s[5]^=r(s[1]+s[13],18),s[14]^=r(s[10]+s[6],7),s[2]^=r(s[14]+s[10],9),s[6]^=r(s[2]+s[14],13),s[10]^=r(s[6]+s[2],18),s[3]^=r(s[15]+s[11],7),s[7]^=r(s[3]+s[15],9),s[11]^=r(s[7]+s[3],13),s[15]^=r(s[11]+s[7],18),s[1]^=r(s[0]+s[3],7),s[2]^=r(s[1]+s[0],9),s[3]^=r(s[2]+s[1],13),s[0]^=r(s[3]+s[2],18),s[6]^=r(s[5]+s[4],7),s[7]^=r(s[6]+s[5],9),s[4]^=r(s[7]+s[6],13),s[5]^=r(s[4]+s[7],18),s[11]^=r(s[10]+s[9],7),s[8]^=r(s[11]+s[10],9),s[9]^=r(s[8]+s[11],13),s[10]^=r(s[9]+s[8],18),s[12]^=r(s[15]+s[14],7),s[13]^=r(s[12]+s[15],9),s[14]^=r(s[13]+s[12],13),s[15]^=r(s[14]+s[13],18);for(o=0;o<16;++o)i[o]+=s[o];for(o=0,n=t+16*a;o<16;o++)e[o+n]=i[o]}for(a=0;a<r;a++)for(o=0,n=t+2*a*16,c=16*a;o<16;o++)e[c+o]=e[n+o];for(a=0;a<r;a++)for(o=0,n=t+16*(2*a+1),c=16*(a+r);o<16;o++)e[c+o]=e[n+o]}function u(e,t,s,i,a,o){let n,c,d,u=l(e,t,128*a*i,1),g=new Uint32Array(32*a*i),h=new Uint32Array(64*i),y=new Uint32Array(32*i*s),f=new Uint32Array(16),m=new Uint32Array(16);for(let e=0;e<g.length;e++){let t=4*e;g[e]=(255&u[t+3])<<24|(255&u[t+2])<<16|(255&u[t+1])<<8|(255&u[t])<<0}let b=32*i;n=a*s*2,c=0,d=null;let C=!1,k=0,v=0,x,w,S=parseInt(1e3/i),E="undefined"!=typeof setImmediate?setImmediate:setTimeout;const M=function(){if(C)return void o(new Error("cancelled"),c/n);let t,B,I,D,F;switch(k){case 0:w=32*v*i;for(let e=0;e<b;e++)h[e]=g[w+e];k=1,x=0;case 1:for((t=s-x)>S&&(t=S),B=0;B<t;B++){for(I=(x+B)*b,D=b;D--;)y[D+I]=h[D];p(h,b,i,f,m)}if(x+=t,c+=t,(F=parseInt(1e3*c/n))!==d){if(C=o(null,c/n))break;d=F}if(x<s)break;x=0,k=2;case 2:for((t=s-x)>S&&(t=S),B=0;B<t;B++){for(D=0,I=(h[16*(2*i-1)]&s-1)*b;D<b;D++)h[D]^=y[I+D];p(h,b,i,f,m)}if(x+=t,c+=t,(F=parseInt(1e3*c/n))!==d){if(C=o(null,c/n))break;d=F}if(x<s)break;for(D=0;D<b;D++)g[w+D]=h[D];if(++v<a){k=0;break}for(u=[],B=0;B<g.length;B++)u.push(g[B]>>0&255),u.push(g[B]>>8&255),u.push(g[B]>>16&255),u.push(g[B]>>24&255);return void o(null,1,Buffer.from(l(e,Buffer.from(u),r,1)));default:return void o(new Error("invalid state"),0)}E(M)};M()}if("object"==typeof e||"string"==typeof e)if(Array.isArray(e))c=Buffer.from(e);else if(Buffer.isBuffer(e))c=e;else{if("string"!=typeof e)return discordCrypt.log("Invalid input parameter type specified!","error"),!1;c=Buffer.from(e,"utf8")}if("object"==typeof t||"string"==typeof t)if(Array.isArray(t))d=Buffer.from(t);else if(Buffer.isBuffer(t))d=t;else{if("string"!=typeof t)return discordCrypt.log("Invalid salt parameter type specified!","error"),!1;d=Buffer.from(t,"utf8")}return"number"!=typeof r?(discordCrypt.log("Invalid output_length parameter specified. Must be a numeric value.","error"),!1):r<=0||r>=65536?(discordCrypt.log("Invalid output_length parameter specified. Must be a numeric value.","error"),!1):!s||s&s-1!=0?(discordCrypt.log("Parameter N must be a power of 2.","error"),!1):void 0!==o&&null!==o?(setTimeout(()=>{u(c,d,s,i,a,o)},1),!0):(discordCrypt.log("No callback specified.","error"),!1)}static whirlpool64(e,t){return Buffer.from(discordCrypt.whirlpool(e,!0),"hex").slice(0,8).toString(t?"hex":"base64")}static sha512_128(e,t){return Buffer.from(discordCrypt.sha512(e,!0),"hex").slice(0,16).toString(t?"hex":"base64")}static whirlpool192(e,t){return Buffer.from(discordCrypt.sha512(e,!0),"hex").slice(0,24).toString(t?"hex":"base64")}static sha160(e,t){return discordCrypt.__createHash(e,"sha1",t)}static sha256(e,t){return discordCrypt.__createHash(e,"sha256",t)}static sha512(e,t){return discordCrypt.__createHash(e,"sha512",t)}static whirlpool(e,t){return discordCrypt.__createHash(e,"whirlpool",t)}static hmac_sha256(e,t,r){return discordCrypt.__createHash(e,"sha256",r,!0,t)}static hmac_sha512(e,t,r){return discordCrypt.__createHash(e,"sha512",r,!0,t)}static hmac_whirlpool(e,t,r){return discordCrypt.__createHash(e,"whirlpool",r,!0,t)}static pbkdf2_sha160(e,t,r,s,i,a=32,o=5e3,n){return discordCrypt.__pbkdf2(e,t,r,s,i,n,"sha1",a,o)}static pbkdf2_sha256(e,t,r,s,i,a=32,o=5e3,n){return discordCrypt.__pbkdf2(e,t,r,s,i,n,"sha256",a,o)}static pbkdf2_sha512(e,t,r,s,i,a=32,o=5e3,n){return discordCrypt.__pbkdf2(e,t,r,s,i,n,"sha512",a,o)}static pbkdf2_whirlpool(e,t,r,s,i,a=32,o=5e3,n){return discordCrypt.__pbkdf2(e,t,r,s,i,n,"whirlpool",a,o)}static __encrypt(e,t,r,s,i,a,o,n=256,c=128,d,l=1e3){const p=`${e}${void 0===t?"":"-"+t}`,u=require("crypto");let g,h,y,f,m,b;if(!discordCrypt.__isValidCipher(p)||-1===["cbc","cfb","ofb"].indexOf(t.toLowerCase()))return null;if(g=discordCrypt.__padMessage(s,r,n,o),h=discordCrypt.__validateKeyIV(i,n),void 0!==d){if(!(f=discordCrypt.__toBuffer(d))||0===f.length)return null;8!==f.length&&(f=Buffer.from(discordCrypt.whirlpool64(f,!0),"hex"))}else f=u.randomBytes(8);y=(m=discordCrypt.pbkdf2_sha256(h.toString("hex"),f.toString("hex"),!0,!0,!0,c/8+n/8,l)).slice(0,c/8),h=m.slice(c/8,c/8+n/8),(b=u.createCipheriv(p,h,y)).setAutoPadding(!1);let C=b.update(g,void 0,"hex");return C+=b.final("hex"),Buffer.from(f.toString("hex")+C,"hex").toString(a?"hex":"base64")}static __decrypt(e,t,r,s,i,a,o,n=256,c=128,d=1e3){const l=`${e}${void 0===t?"":"-"+t}`,p=require("crypto");let u,g,h,y,f,m;if(!discordCrypt.__isValidCipher(l)||-1===["cbc","ofb","cfb"].indexOf(t.toLowerCase()))return null;u=discordCrypt.__validateMessage(s,o),g=discordCrypt.__validateKeyIV(i,n),y=u.slice(0,8),h=(f=discordCrypt.pbkdf2_sha256(g.toString("hex"),y.toString("hex"),!0,!0,!0,c/8+n/8,d)).slice(0,c/8),g=f.slice(c/8,c/8+n/8),u=u.slice(8),(m=p.createDecipheriv(l,g,h)).setAutoPadding(!1);let b=m.update(u,void 0,"hex");return b+=m.final("hex"),(b=discordCrypt.__padMessage(b,r,n,!0,!0)).toString(a)}static blowfish512_encrypt(e,t,r,s,i=!1,a,o,n=1e3){const c=512,d=64;return discordCrypt.__encrypt("bf",r,s,e,t,i,a,512,64,o,n)}static blowfish512_decrypt(e,t,r,s,i="utf8",a,o=1e3){const n=512,c=64;return discordCrypt.__decrypt("bf",r,s,e,t,i,a,512,64,o)}static aes256_encrypt(e,t,r,s,i=!1,a,o,n=1e3){const c=256,d=128;return discordCrypt.__encrypt("aes-256",r,s,e,t,i,a,256,128,o,n)}static aes256_decrypt(e,t,r,s,i="utf8",a,o=1e3){const n=256,c=128;return discordCrypt.__decrypt("aes-256",r,s,e,t,i,a,256,128,o)}static aes256_encrypt_gcm(e,t,r,s=!1,i,a,o,n=1e3){const c=128,d=256,l="aes-256-gcm",p=require("crypto");let u,g,h,y,f,m;if(u=discordCrypt.__padMessage(e,r,256,i),g=discordCrypt.__validateKeyIV(t,256),void 0!==o){if(!(y=discordCrypt.__toBuffer(o))||0===y.length)return null;8!==y.length&&(y=Buffer.from(discordCrypt.whirlpool64(y,!0),"hex"))}else y=p.randomBytes(8);h=(f=discordCrypt.pbkdf2_sha256(g.toString("hex"),y.toString("hex"),!0,!0,!0,48,n)).slice(0,16),g=f.slice(16,48),m=p.createCipheriv(l,g,h),void 0!==a&&m.setAAD(discordCrypt.__toBuffer(a)),m.setAutoPadding(!1);let b=m.update(u,void 0,"hex");return b+=m.final("hex"),Buffer.from(m.getAuthTag().toString("hex")+y.toString("hex")+b,"hex").toString(s?"hex":"base64")}static aes256_decrypt_gcm(e,t,r,s="utf8",i,a,o=1e3){const n=128,c=256,d="aes-256-gcm",l=require("crypto");let p,u,g,h,y,f,m;p=discordCrypt.__validateMessage(e,i),u=discordCrypt.__validateKeyIV(t,256),y=p.slice(0,16),h=(p=p.slice(16)).slice(0,8),p=p.slice(8),g=(f=discordCrypt.pbkdf2_sha256(u.toString("hex"),h.toString("hex"),!0,!0,!0,48,o)).slice(0,16),u=f.slice(16,48),(m=l.createDecipheriv(d,u,g)).setAuthTag(y),void 0!==a&&m.setAAD(discordCrypt.__toBuffer(a)),m.setAutoPadding(!1);let b=m.update(p,void 0,"hex");return b+=m.final("hex"),(b=discordCrypt.__padMessage(b,r,256,!0,!0)).toString(s)}static camellia256_encrypt(e,t,r,s,i=!1,a,o,n=1e3){const c=256,d=128;return discordCrypt.__encrypt("camellia-256",r,s,e,t,i,a,256,128,o,n)}static camellia256_decrypt(e,t,r,s,i="utf8",a,o=1e3){const n=256,c=128;return discordCrypt.__decrypt("camellia-256",r,s,e,t,i,a,256,128,o)}static tripledes192_encrypt(e,t,r,s,i=!1,a,o,n=1e3){const c=192,d=64;return discordCrypt.__encrypt("des-ede3",r,s,e,t,i,a,192,64,o,n)}static tripledes192_decrypt(e,t,r,s,i="utf8",a,o=1e3){const n=192,c=64;return discordCrypt.__decrypt("des-ede3",r,s,e,t,i,a,192,64,o)}static idea128_encrypt(e,t,r,s,i=!1,a,o,n=1e3){const c=128,d=64;return discordCrypt.__encrypt("idea",r,s,e,t,i,a,128,64,o,n)}static idea128_decrypt(e,t,r,s,i="utf8",a,o=1e3){const n=128,c=64;return discordCrypt.__decrypt("idea",r,s,e,t,i,a,128,64,o)}static cipherStringToIndex(e,t){let r=0;if("number"==typeof e)return e;switch("string"==typeof e&&-1!==e.search("-")&&void 0===t&&(t=(e=e.split("-")[0]).split("-")[1]),e){case"bf":break;case"aes":r=1;break;case"camel":r=2;break;case"idea":r=3;break;case"tdes":r=4;break;default:return 0}if(void 0!==t)switch(t){case"bf":break;case"aes":r+=5;break;case"camel":r+=10;break;case"idea":r+=15;break;case"tdes":r+=20}return r}static cipherIndexToString(e,t){return void 0!==t&&t?e>=20?"tdes":e>=15?"idea":e>=10?"camel":e>=5?"aes":"bf":(e>=20?e-=20:e>=15&&e<=19?e-=15:e>=10&&e<=14?e-=10:e>=5&&e<=9&&(e-=5),1===e?"aes":2===e?"camel":3===e?"idea":4===e?"tdes":"bf")}static entropicBitLength(e){let t=Object.create(null),r,s=0,i=e.length;for(r in e.split("").forEach(e=>{t[e]?t[e]++:t[e]=1}),t){let e=t[r]/i;s-=e*Math.log(e)/Math.log(2)}return parseInt(s*i)}static getBraille(){return Array.from("\u2800\u2801\u2802\u2803\u2804\u2805\u2806\u2807\u2808\u2809\u280a\u280b\u280c\u280d\u280e\u280f\u2810\u2811\u2812\u2813\u2814\u2815\u2816\u2817\u2818\u2819\u281a\u281b\u281c\u281d\u281e\u281f\u2820\u2821\u2822\u2823\u2824\u2825\u2826\u2827\u2828\u2829\u282a\u282b\u282c\u282d\u282e\u282f\u2830\u2831\u2832\u2833\u2834\u2835\u2836\u2837\u2838\u2839\u283a\u283b\u283c\u283d\u283e\u283f\u2840\u2841\u2842\u2843\u2844\u2845\u2846\u2847\u2848\u2849\u284a\u284b\u284c\u284d\u284e\u284f\u2850\u2851\u2852\u2853\u2854\u2855\u2856\u2857\u2858\u2859\u285a\u285b\u285c\u285d\u285e\u285f\u2860\u2861\u2862\u2863\u2864\u2865\u2866\u2867\u2868\u2869\u286a\u286b\u286c\u286d\u286e\u286f\u2870\u2871\u2872\u2873\u2874\u2875\u2876\u2877\u2878\u2879\u287a\u287b\u287c\u287d\u287e\u287f\u2880\u2881\u2882\u2883\u2884\u2885\u2886\u2887\u2888\u2889\u288a\u288b\u288c\u288d\u288e\u288f\u2890\u2891\u2892\u2893\u2894\u2895\u2896\u2897\u2898\u2899\u289a\u289b\u289c\u289d\u289e\u289f\u28a0\u28a1\u28a2\u28a3\u28a4\u28a5\u28a6\u28a7\u28a8\u28a9\u28aa\u28ab\u28ac\u28ad\u28ae\u28af\u28b0\u28b1\u28b2\u28b3\u28b4\u28b5\u28b6\u28b7\u28b8\u28b9\u28ba\u28bb\u28bc\u28bd\u28be\u28bf\u28c0\u28c1\u28c2\u28c3\u28c4\u28c5\u28c6\u28c7\u28c8\u28c9\u28ca\u28cb\u28cc\u28cd\u28ce\u28cf\u28d0\u28d1\u28d2\u28d3\u28d4\u28d5\u28d6\u28d7\u28d8\u28d9\u28da\u28db\u28dc\u28dd\u28de\u28df\u28e0\u28e1\u28e2\u28e3\u28e4\u28e5\u28e6\u28e7\u28e8\u28e9\u28ea\u28eb\u28ec\u28ed\u28ee\u28ef\u28f0\u28f1\u28f2\u28f3\u28f4\u28f5\u28f6\u28f7\u28f8\u28f9\u28fa\u28fb\u28fc\u28fd\u28fe\u28ff")}static isValidBraille(e){let t=discordCrypt.getBraille();for(let r=0;r<e.length;r++)if(-1===t.indexOf(e[r]))return!1;return!0}static getBase64(){return Array.from("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")}static getDHBitSizes(){return[768,1024,1536,2048,3072,4096,6144,8192]}static getECDHBitSizes(){return[224,256,384,409,521,571]}static isValidExchangeAlgorithm(e){return e>=0&&e<=discordCrypt.getDHBitSizes().length+discordCrypt.getECDHBitSizes().length-1}static indexToExchangeAlgorithmString(e){let t=discordCrypt.getDHBitSizes(),r=discordCrypt.getECDHBitSizes(),s=["DH-","ECDH-"];return discordCrypt.isValidExchangeAlgorithm(e)?e<=t.length-1?s[0]+t[e]:s[1]+r[e-t.length]:"Invalid Algorithm"}static indexToAlgorithmBitLength(e){let t=discordCrypt.getDHBitSizes(),r=discordCrypt.getECDHBitSizes();return discordCrypt.isValidExchangeAlgorithm(e)?e<=t.length-1?t[e]:r[e-t.length]:0}static computeExchangeSharedSecret(e,t,r,s){let i,a;i=r?"base64":"hex",a=s?"base64":"hex";try{return e.computeSecret(t,i,a)}catch(e){return null}}static generateDH(e,t){let r,s;switch(e){case 768:r="modp1";break;case 1024:r="modp2";break;case 1536:r="modp5";break;case 2048:r="modp14";break;case 3072:r="modp15";break;case 4096:r="modp16";break;case 6144:r="modp17";break;case 8192:r="modp18";break;default:return null}try{s=require("crypto").getDiffieHellman(r)}catch(e){return null}return void 0!==s&&null!==s&&void 0!==s.generateKeys&&(void 0===t?s.generateKeys():void 0!==s.setPrivateKey&&s.setPrivateKey(t)),s}static generateECDH(e,t){let r,s;switch(e){case 224:r="secp224k1";break;case 384:r="secp384r1";break;case 409:r="sect409k1";break;case 521:r="secp521r1";break;case 571:r="sect571k1";break;case 256:break;default:return null}try{256!==e?s=require("crypto").createECDH(r):(s=new global.Curve25519).generateKeys(void 0,require("crypto").randomBytes(32))}catch(e){return null}return void 0!==s&&null!==s&&void 0!==s.generateKeys&&256!==e&&(void 0===t?s.generateKeys("hex","compressed"):void 0!==s.setPrivateKey&&s.setPrivateKey(t)),s}static substituteMessage(e,t){let r=discordCrypt.getBraille(),s="",i=0;if(void 0!==t){if(!Buffer.isBuffer(e))throw"Message input is not a buffer.";for(let t=0;t<e.length;t++)s+=r[e[t]]}else for(let t=0;t<e.length;t++){if(-1===(i=r.indexOf(e[t])))throw"Message contains invalid characters.";s+=`0${i.toString(16)}`.slice(-2)}return s}static metaDataEncode(e,t,r,s){"string"==typeof e&&(e=discordCrypt.cipherStringToIndex(e)),"string"==typeof t&&(t=["cbc","cfb","ofb"].indexOf(t.toLowerCase())),"string"==typeof r&&(r=["pkc7","ans2","iso1","iso9"].indexOf(r.toLowerCase()));let i=Buffer.from([e,t,r,parseInt(s)]);return discordCrypt.substituteMessage(i,!0)}static metaDataDecode(e){return Buffer.from(discordCrypt.substituteMessage(e),"hex")}static symmetricEncrypt(e,t,r,s,i,a){const o=new Uint8Array(Buffer.from("DiscordCrypt MAC"));function n(e,t,r,s,i){switch(r){case 0:return discordCrypt.blowfish512_encrypt(e,t,s,i);case 1:return discordCrypt.aes256_encrypt(e,t,s,i);case 2:return discordCrypt.camellia256_encrypt(e,t,s,i);case 3:return discordCrypt.idea128_encrypt(e,t,s,i);case 4:return discordCrypt.tripledes192_encrypt(e,t,s,i);default:return null}}let c=i.toLowerCase(),d=a,l="";if(s>=0&&s<=4)l=discordCrypt.blowfish512_encrypt(n(e,t,s,c,d),r,c,d,!0,!1);else if(s>=5&&s<=9)l=discordCrypt.aes256_encrypt(n(e,t,s-5,c,d),r,c,d,!0,!1);else if(s>=10&&s<=14)l=discordCrypt.camellia256_encrypt(n(e,t,s-10,c,d),r,c,d,!0,!1);else if(s>=15&&s<=19)l=discordCrypt.idea128_encrypt(n(e,t,s-15,c,d),r,c,d,!0,!1);else{if(!(s>=20&&s<=24))throw`Unknown cipher selected: ${s}`;l=discordCrypt.tripledes192_encrypt(n(e,t,s-20,c,d),r,c,d,!0,!1)}let p=kmac256(new Uint8Array(Buffer.concat([t,r])),new Uint8Array(Buffer.from(l,"hex")),256,o);return l=Buffer.from(p+l,"hex"),discordCrypt.substituteMessage(l,!0)}static symmetricDecrypt(e,t,r,s,i,a){const o=new Uint8Array(Buffer.from("DiscordCrypt MAC")),n=require("crypto");function c(e,t,r,s,i,a="utf8",o){switch(r){case 0:return discordCrypt.blowfish512_decrypt(e,t,s,i,a,o);case 1:return discordCrypt.aes256_decrypt(e,t,s,i,a,o);case 2:return discordCrypt.camellia256_decrypt(e,t,s,i,a,o);case 3:return discordCrypt.idea128_decrypt(e,t,s,i,a,o);case 4:return discordCrypt.tripledes192_decrypt(e,t,s,i,a,o);default:return null}}let d,l;if("string"!=typeof i)if(0===i)d="cbc";else if(1===i)d="cfb";else{if(2!==i)return"";d="ofb"}if("string"!=typeof a)if(0===a)l="pkc7";else if(1===a)l="ans2";else if(2===a)l="iso1";else{if(3!==a)return"";l="iso9"}try{e=Buffer.from(discordCrypt.substituteMessage(e),"hex");let i=Buffer.from(e.subarray(0,32));e=Buffer.from(e.subarray(32));let a=Buffer.from(kmac256(new Uint8Array(Buffer.concat([t,r])),new Uint8Array(e),256,o),"hex");return n.timingSafeEqual(a,i)?s>=0&&s<=4?c(discordCrypt.blowfish512_decrypt(e,r,d,l,"base64"),t,s,d,l,"utf8",!1):s>=5&&s<=9?c(discordCrypt.aes256_decrypt(e,r,d,l,"base64"),t,s-5,d,l,"utf8",!1):s>=10&&s<=14?c(discordCrypt.camellia256_decrypt(e,r,d,l,"base64"),t,s-10,d,l,"utf8",!1):s>=15&&s<=19?c(discordCrypt.idea128_decrypt(e,r,d,l,"base64"),t,s-15,d,l,"utf8",!1):s>=20&&s<=24?c(discordCrypt.tripledes192_decrypt(e,r,d,l,"base64"),t,s-20,d,l,"utf8",!1):-3:1}catch(e){return 2}}}module.exports={discordCrypt:discordCrypt};