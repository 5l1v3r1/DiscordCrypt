//META{"name":"discordCrypt"}*//

/*******************************************************************************
 * MIT License
 *
 * Copyright (c) 2018 Leonardo Gates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

"use strict";class discordCrypt{constructor(){this.messageMarkupClass=".markup",this.searchUiClass=".search .search-bar",this.channelTextAreaClass=".content textarea",this.autoCompleteClass=".autocomplete-1vrmpx",this.encodedMessageHeader="\u28b7\u28b8\u28b9\u28ba",this.encodedKeyHeader="\u28bb\u28bc\u28bd\u28be",this.messageHeader="-----ENCRYPTED MESSAGE-----",this.masterPassword=null,this.scanInterval=void 0,this.toolbarReloadInterval=void 0,this.updateHandlerInterval=void 0,this.timedMessageInterval=void 0,this.messageUpdateDispatcher=null,this.configFile=null,this.cachedModules={},this.encryptModes=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],this.encryptBlockModes=["CBC","CFB","OFB"],this.paddingModes=["PKC7","ANS2","ISO1","ISO9"],this.appCss="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",this.toolbarHtml="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",this.masterPasswordHtml="eNqtUs1uwyAMfhWLqUeUrLt1aS7bA+wVHKANGgUETqu+/SAJSVpNO42DY9n+fjBppL6ClkcmBb9gJBW4u6pg8M5AGIxx7JRSC81mfq5yoWzCnbQy8hfQYzvS3agjI+cP8FbvEiM0/b6UhTMuHF5Opzqdd1aEeoUyGZv9XeKZtU3V7zO2C1U7hpRHj7ZAfHAXT0+QPLBMa+sHArr7pOuT55sLD/ZLjc/OZ2LZ8XWaNGXbn0jYYVTwVTpV8QbTxmbaSEiQA+8w5LsvpuEImyfII0NkW1hG8ICk7XnZ4k1L6g+QNjUKVUnpSTBRhsEkRjT6bCfFbiBydjMxFZ5YX+t6t77AYI0T31zOF+Ud2f/QhCXj2qbfJSoG+fzhRKAVyowG2o8xb6qJYrUzfab4AyMh9Dk=",this.settingsMenuHtml="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",this.unlockIcon="PHN2ZyBjbGFzcz0iZGMtc3ZnIiBmaWxsPSJsaWdodGdyZXkiIGhlaWdodD0iMjBweCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjBweCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cGF0aCBkPSJNMTIgMTdjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0yLTIgLjktMiAyIC45IDIgMiAyem02LTloLTFWNmMwLTIuNzYtMi4yNC01LTUtNVM3IDMuMjQgNyA2aDEuOWMwLTEuNzEgMS4zOS0zLjEgMy4xLTMuMSAxLjcxIDAgMy4xIDEuMzkgMy4xIDMuMXYySDZjLTEuMSAwLTIgLjktMiAydjEwYzAgMS4xLjkgMiAyIDJoMTJjMS4xIDAgMi0uOSAyLTJWMTBjMC0xLjEtLjktMi0yLTJ6bTAgMTJINlYxMGgxMnYxMHoiPjwvcGF0aD48L3N2Zz4=",this.lockIcon="PHN2ZyBjbGFzcz0iZGMtc3ZnIiBmaWxsPSJsaWdodGdyZXkiIGhlaWdodD0iMjBweCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjBweCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48ZGVmcz48cGF0aCBkPSJNMCAwaDI0djI0SDBWMHoiIGlkPSJhIi8+PC9kZWZzPjxjbGlwUGF0aCBpZD0iYiI+PHVzZSBvdmVyZmxvdz0idmlzaWJsZSIgeGxpbms6aHJlZj0iI2EiLz48L2NsaXBQYXRoPjxwYXRoIGNsaXAtcGF0aD0idXJsKCNiKSIgZD0iTTEyIDE3YzEuMSAwIDItLjkgMi0ycy0uOS0yLTItMi0yIC45LTIgMiAuOSAyIDIgMnptNi05aC0xVjZjMC0yLjc2LTIuMjQtNS01LTVTNyAzLjI0IDcgNnYySDZjLTEuMSAwLTIgLjktMiAydjEwYzAgMS4xLjkgMiAyIDJoMTJjMS4xIDAgMi0uOSAyLTJWMTBjMC0xLjEtLjktMi0yLTJ6TTguOSA2YzAtMS43MSAxLjM5LTMuMSAzLjEtMy4xczMuMSAxLjM5IDMuMSAzLjF2Mkg4LjlWNnpNMTggMjBINlYxMGgxMnYxMHoiLz48L3N2Zz4=",this.libraries={"currify.js":{requiresElectron:!1,requiresBrowser:!0,code:"eNqdVFFv2yAQ/iuONaWgEit5jUujae2etvZlfbKs1rWhYaLgYWgWOfz3gcFOKuWh3Ys5HXcfd9995xk1otZMCiBgzyhI5fNvUusUY71viaQJ+dtKpbv5PDWiIZQJ0qSz8fJVNoYTGI4shmIBYE54RxKPN+IfEQPKfB7OrHptYDBBUSIRUntOdKJyoPC5Z3dMNHK3Ccf6XMQLl88V34TjbERHON34z1pvWQez2ijF6N4Xby2YWIH9W6USgRQiuSLaKJGMd4kAzos07CePBBSZgccZKWgZLDVYHqbGZ+hQ5I9hyvERjdznmPm8hvG92oHOltD72ehj0edRORZkl9wqJRV4+lYJIXXimm3idJKLLz21F08w11sldwnPatkQnP68v3n4cft4d//r8fv9w91Nirj1cC32peM+TnPdW5v7FoplmdUV56AdB41OteNTCR4CV2UhypEtCcjhIKBFLTomDnw65mwM8i+Ol0MR7ENMUdexF4rAy1xc6YwT8aK3ubi8hBJoVwScqrCgjxNeF8eyfRmwT43TaqcVc7ofGNX4dMawDyDFabsRV2VV2/I9eJOsSZaoUi/mlQjduX5PXiGfjfei+mwGkv+Tg9gHskqbn0g8/iim+UwrJWBQWJBiSkXSbaXhTfJMpqWZpW7o05/iPc1+nEFG09txpIjhr0pVe0CuVxuyWK2XEFG8yumVE4GbNivoYlUe05yc/LpIh4pYxLjGKlrwfMMsrJM5VkXARI54H1sotwxS1JUGDA2lZa2SWnomso6zmoRdOZIIHfn1VMJirGqxQnwUqQYGFnV5OBhrUe9Ydx9UpFG3aQnBZEML838pAQw+"},"curve25519.js":{requiresElectron:!0,requiresBrowser:!1,code:"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"},"sha3.js":{requiresElectron:!0,requiresBrowser:!1,code:"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"},"sjcl.js":{requiresElectron:!0,requiresBrowser:!1,code:""},"smalltalk.js":{requiresElectron:!1,requiresBrowser:!0,code:"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"}}}getName(){return"DiscordCrypt"}getDescription(){return"Provides secure messaging for Discord using various cryptography standards."}getAuthor(){return"Leonardo Gates"}getVersion(){return"1.2.8"}start(){const e=this;if(!discordCrypt.validPluginName())return void _alert("Hi There! - DiscordCrypt","Oops!\r\n\r\nIt seems you didn't read discordCrypt's usage guide. :(\r\nYou need to name this plugin exactly as follows to allow it to function correctly.\r\n\r\n"+`\t${discordCrypt.getPluginName()}\r\n\r\n\r\n`+"You should probably check the usage guide again just in case you missed anything else. :)");if(!this.configFile)return void this.loadMasterPassword();discordCrypt.__shouldIgnoreUpdates(this.getVersion())||(this.checkForUpdates(),this.updateHandlerInterval=setInterval(()=>{e.checkForUpdates()},36e5));const t=discordCrypt.getWebpackModuleSearcher();this.cachedModules={MessageParser:t.findByUniqueProperties(["createMessage","parse","unparse"]),MessageController:t.findByUniqueProperties(["sendClydeError","sendBotMessage"]),MessageActionTypes:t.findByUniqueProperties(["ActionTypes","ActivityTypes"]),MessageDispatcher:t.findByUniqueProperties(["dispatch","maybeDispatch","dirtyDispatch"]),MessageQueue:t.findByUniqueProperties(["enqueue","handleSend","handleResponse"]),UserResolver:t.findByUniqueProperties(["getUser","getUsers","findByTag"]),GuildResolver:t.findByUniqueProperties(["getGuild","getGuilds"]),ChannelResolver:t.findByUniqueProperties(["getChannel","getChannels","getDMFromUserId","getDMUserIds"]),HighlightJS:t.findByUniqueProperties(["initHighlighting","highlightBlock","highlightAuto"])};for(let e in this.cachedModules)if("object"!=typeof this.cachedModules[e])return void _alert("Error Loading DiscordCrypt",`Could not find requisite module: ${e}`);this.hookMessageCallbacks()?setImmediate(()=>{this.loadToolbar(),this.attachHandler()}):this.toolbarReloadInterval=setInterval(()=>{e.loadToolbar(),e.attachHandler()},5e3),this.scanInterval=setInterval(()=>{e.decodeMessages()},e.configFile.encryptScanDelay),this.timedMessageInterval=setInterval(()=>{let t=Date.now();e.configFile.timedMessages.forEach((r,i)=>{if(r&&r.expireTime||(e.configFile.timedMessages.splice(i,1),e.saveConfig()),r.expireTime<t){discordCrypt.log(`Deleting timed message "${e.configFile.timedMessages[i].messageId}"`);try{discordCrypt.deleteMessage(r.channelId,r.messageId,e.cachedModules)}catch(r){discordCrypt.log(`${r.messageId}: ${r.toString()}`,"error")}e.configFile.timedMessages.splice(i,1),e.saveConfig()}})},5e3),setImmediate(()=>{e.decodeMessages()})}stop(){discordCrypt.validPluginName()&&($(this.channelTextAreaClass).off("keydown.dcrypt"),this.unhookMessageCallbacks()||clearInterval(this.toolbarReloadInterval),clearInterval(this.scanInterval),clearInterval(this.timedMessageInterval),clearInterval(this.updateHandlerInterval),$("#dc-overlay").remove(),$("#dc-file-btn").remove(),$("#dc-lock-btn").remove(),$("#dc-passwd-btn").remove(),$("#dc-exchange-btn").remove(),$("#dc-settings-btn").remove(),$("#dc-quick-exchange-btn").remove(),$("#dc-clipboard-upload-btn").remove(),this.configFile=null)}load(){discordCrypt.injectCSS("dc-css",discordCrypt.__zlibDecompress(this.appCss)),discordCrypt.__loadLibraries(this.libraries)}unload(){discordCrypt.clearCSS("dc-css")}getDefaultConfig(){return{version:this.getVersion(),useEmbeds:!1,defaultPassword:"\u2813\u28ed\u286b\u28ee\u28b9\u28ae\u2816\u28e6\u282c\u28ac\u28f8\u2833\u281c\u28cd\u28ab\u2833\u28c2\u2819\u28f5\u2858\u2855\u2810\u28ab\u2897\u2819\u2871\u2801\u2877\u283a\u2857\u281f\u2821\u28b4\u2896\u2883\u2859\u28ba\u28c4\u28d1\u28d7\u28ac\u2871\u28f4\u282e\u2843\u288f\u289a\u28a3\u28fe\u288e\u28a9\u28d9\u2801\u28f6\u2881\u2837\u28ce\u2807\u2826\u2883\u2826\u2807\u28e9\u2845",encodeMessageTrigger:"ENC",encryptScanDelay:1e3,encryptMode:7,encryptBlockMode:"CBC",encodeAll:!0,paddingMode:"PKC7",passList:{},up1Host:"https://share.riseup.net",up1ApiKey:"59Mnk5nY6eCn4bi9GvfOXhMH54E7Bh6EMJXtyJfs",timedMessages:[],timedMessageExpires:0}}configExists(){let e=bdPluginStorage.get(this.getName(),"config");return e&&null!==e&&""!==e}loadConfig(){discordCrypt.log("Loading configuration file ...");let e=bdPluginStorage.get(this.getName(),"config");if(!e||null===e||""===e)return this.configFile=this.getDefaultConfig(),this.saveConfig(),!0;try{this.configFile=JSON.parse(discordCrypt.__zlibDecompress(discordCrypt.aes256_decrypt_gcm(e.data,this.masterPassword,"PKC7","base64",!1),"base64","utf8"))}catch(e){return discordCrypt.log(`Decryption of configuration file failed - ${e}`,"error"),!1}if(!this.configFile||!this.configFile.version)return discordCrypt.log("Decryption of configuration file failed.","error"),!1;let t=this.getDefaultConfig(),r=!1;for(let e in t)this.configFile.hasOwnProperty(e)||(this.configFile[e]=t[e],discordCrypt.log(`Default value added for missing property '${e}' in the configuration file.`),r=!0);for(let e in this.configFile)t.hasOwnProperty(e)||(delete this.configFile[e],discordCrypt.log(`Removing unknown property '${e}' from the configuration file.`),r=!0);if(this.configFile.version!==this.getVersion()){let e=this.configFile.version,t=this.configFile.passList;this.configFile=this.getDefaultConfig(),this.configFile.passList=t,r=!0,discordCrypt.log(`Updated plugin version from v${e} to v${this.getVersion()}.`)}return r&&this.saveConfig(),discordCrypt.log(`Loaded configuration file! - v${this.configFile.version}`),!0}saveConfig(){bdPluginStorage.set(this.getName(),"config",{data:discordCrypt.aes256_encrypt_gcm(discordCrypt.__zlibCompress(JSON.stringify(this.configFile),"utf8"),this.masterPassword,"PKC7",!1)})}saveSettings(e){this.saveConfig(),this.decodeMessages(!0),e&&(e.text("Saved & Applied!"),setTimeout(function(){e.text("Save & Apply")},1e3))}resetSettings(e){let t=this.configFile.passList;this.configFile=this.getDefaultConfig(),this.configFile.passList=t,this.saveConfig(),this.decodeMessages(!0),e&&(e.text("Restored Default Settings!"),setTimeout(function(){e.text("Reset Settings")},1e3))}updatePasswords(){if("block"!==$("#dc-overlay-password").css("display"))return;let e=$("#dc-password-primary"),t=$("#dc-password-secondary");""!==e.val()&&e.val().length>1?(this.configFile.passList[discordCrypt.getChannelId()]=discordCrypt.createPassword(e.val(),""),""!==t.val()&&t.val().length>1&&(this.configFile.passList[discordCrypt.getChannelId()].secondary=t.val()),e.val(""),t.val("")):delete this.configFile.passList[discordCrypt.getChannelId()],this.saveConfig(),this.decodeMessages(!0)}hookMessageCallbacks(){if(this.messageUpdateDispatcher||(this.messageUpdateDispatcher=discordCrypt.getWebpackModuleSearcher().findByDispatchNames(["LOAD_MESSAGES","LOAD_MESSAGES_SUCCESS","LOAD_MESSAGES_FAILURE","TRUNCATE_MESSAGES","MESSAGE_CREATE","MESSAGE_UPDATE","MESSAGE_DELETE","MESSAGE_DELETE_BULK","MESSAGE_REVEAL","CHANNEL_SELECT","CHANNEL_CREATE","CHANNEL_PRELOAD","GUILD_CREATE","GUILD_SELECT","GUILD_DELETE"])),!this.messageUpdateDispatcher)return discordCrypt.log("Failed to locate the switch event dispatcher!","error"),!1;discordCrypt.hookDispatcher(this.messageUpdateDispatcher,"CHANNEL_SELECT",{after:e=>{discordCrypt.getChannelId()===e.methodArguments[0].channelId&&setTimeout(()=>{discordCrypt.log("Detected chat switch.","debug"),this.loadToolbar(),this.attachHandler(),this.decodeMessages()},1)}});let e={after:e=>{discordCrypt.getChannelId()===e.methodArguments[0].channelId&&setTimeout(()=>{this.decodeMessages()},1)}};return discordCrypt.hookDispatcher(this.messageUpdateDispatcher,"MESSAGE_CREATE",e),discordCrypt.hookDispatcher(this.messageUpdateDispatcher,"MESSAGE_UPDATE",e),discordCrypt.hookDispatcher(this.messageUpdateDispatcher,"MESSAGE_DELETE",e),!0}unhookMessageCallbacks(){if(!this.messageUpdateDispatcher)return!1;for(let e in this.messageUpdateDispatcher._actionHandlers)e.hasOwnProperty("__cancel")&&e.__cancel();return!0}loadMasterPassword(){const e=this;if(0!==$("#dc-master-overlay").length)return;const t=this.configExists(),r=t?"Unlock Database":"Create Database";$(document.body).prepend(discordCrypt.__zlibDecompress(this.masterPasswordHtml));const i=$("#dc-db-password"),s=$("#dc-cancel-btn"),a=$("#dc-unlock-database-btn"),n=$("#dc-master-status"),o=$("#dc-header-master-msg"),c=$("#dc-prompt-master-msg");o.text(t?"---------- Database Is Locked ----------":"---------- Database Not Found ----------"),c.text(t?"Enter Password:":"Enter New Password:"),a.text(r),document.getElementById("dc-master-overlay").style.display="block",i.on("keydown",function(e){let t;13===(e.keyCode||e.which)&&a.click()}),a.click(discordCrypt.on_master_unlock_button_clicked(this,a,t,i,r,n)),s.click(discordCrypt.on_master_cancel_button_clicked(this))}checkForUpdates(){const e=this;setTimeout(()=>{try{discordCrypt.checkForUpdate((t,r,i,s)=>{const a=require("path").join(discordCrypt.getPluginsPath(),discordCrypt.getPluginName()),n=require("fs");$("#dc-overlay").css("display","block"),$("#dc-update-overlay").css("display","block"),$("#dc-new-version").text(`New Version: ${""===i?"N/A":i} ( #${r} )`),$("#dc-old-version").text(`Old Version: ${e.getVersion()}`);let o=$("#dc-changelog");o.val("string"==typeof s&&s.length>0?discordCrypt.__tryParseChangelog(s,e.getVersion()):"N/A"),o.scrollTop(0),n.writeFile(a,t,e=>{e&&(discordCrypt.log(`Unable to replace the target plugin. ( ${e} )\nDestination: ${a}`,"error"),_alert("Error During Update","Failed to apply the update!"))})})}catch(e){discordCrypt.log(e,"warn")}},1)}loadToolbar(){if(!this.configFile)return;if("@me"===discordCrypt.getChannelId())return;if(0!==$("#dc-passwd-btn").length)return;$(this.searchUiClass).parent().parent().parent().prepend(discordCrypt.__zlibDecompress(this.toolbarHtml));let e=$("#dc-passwd-btn"),t=$("#dc-lock-btn"),r=$(".dc-svg");r.attr("class","dc-svg"),t.length>0&&(this.configFile.encodeAll?(t.attr("title","Disable Message Encryption"),t.html(Buffer.from(this.lockIcon,"base64").toString("utf8"))):(t.attr("title","Enable Message Encryption"),t.html(Buffer.from(this.unlockIcon,"base64").toString("utf8"))),r.attr("class","dc-svg")),$(document.body).prepend(discordCrypt.__zlibDecompress(this.settingsMenuHtml)),discordCrypt.set_active_settings_tab(0),discordCrypt.set_active_exchange_tab(0),$("#dc-secondary-cipher").val(discordCrypt.cipherIndexToString(this.configFile.encryptMode,!0)),$("#dc-primary-cipher").val(discordCrypt.cipherIndexToString(this.configFile.encryptMode,!1)),$("#dc-settings-cipher-mode").val(this.configFile.encryptBlockMode.toLowerCase()),$("#dc-settings-padding-mode").val(this.configFile.paddingMode.toLowerCase()),$("#dc-settings-encrypt-trigger").val(this.configFile.encodeMessageTrigger),$("#dc-settings-timed-expire").val(this.configFile.timedMessageExpires),$("#dc-settings-default-pwd").val(this.configFile.defaultPassword),$("#dc-settings-scan-delay").val(this.configFile.encryptScanDelay),$("#dc-embed-enabled").prop("checked",this.configFile.useEmbeds),$("#dc-clipboard-upload-btn").click(discordCrypt.on_upload_encrypted_clipboard_button_clicked(this)),$("#dc-file-btn").click(discordCrypt.on_file_button_clicked),$("#dc-select-file-path-btn").click(discordCrypt.on_alter_file_button_clicked),$("#dc-file-upload-btn").click(discordCrypt.on_upload_file_button_clicked(this)),$("#dc-file-cancel-btn").click(discordCrypt.on_cancel_file_upload_button_clicked),$("#dc-settings-btn").click(discordCrypt.on_settings_button_clicked),$("#dc-plugin-settings-btn").click(discordCrypt.on_plugin_settings_tab_button_clicked),$("#dc-database-settings-btn").click(discordCrypt.on_database_settings_tab_button_clicked(this)),$("#dc-import-database-btn").click(discordCrypt.on_import_database_button_clicked(this)),$("#dc-export-database-btn").click(discordCrypt.on_export_database_button_clicked(this)),$("#dc-erase-entries-btn").click(discordCrypt.on_clear_entries_button_clicked(this)),$("#dc-exit-settings-btn").click(discordCrypt.on_settings_close_button_clicked),$("#dc-settings-save-btn").click(discordCrypt.on_save_settings_button_clicked(this)),$("#dc-settings-reset-btn").click(discordCrypt.on_reset_settings_button_clicked(this)),$("#dc-restart-now-btn").click(discordCrypt.on_restart_now_button_clicked),$("#dc-restart-later-btn").click(discordCrypt.on_restart_later_button_clicked),$("#dc-tab-info-btn").click(discordCrypt.on_info_tab_button_clicked),$("#dc-tab-keygen-btn").click(discordCrypt.on_exchange_tab_button_clicked),$("#dc-tab-handshake-btn").click(discordCrypt.on_handshake_tab_button_clicked),$("#dc-exit-exchange-btn").click(discordCrypt.on_close_exchange_button_clicked),$("#dc-exchange-btn").click(discordCrypt.on_open_exchange_button_clicked),$("#dc-quick-exchange-btn").click(discordCrypt.on_quick_send_public_key_button_clicked),$("#dc-keygen-method").change(discordCrypt.on_exchange_algorithm_changed),$("#dc-keygen-gen-btn").click(discordCrypt.on_generate_new_key_pair_button_clicked),$("#dc-keygen-clear-btn").click(discordCrypt.on_keygen_clear_button_clicked),$("#dc-keygen-send-pub-btn").click(discordCrypt.on_keygen_send_public_key_button_clicked(this)),$("#dc-handshake-paste-btn").click(discordCrypt.on_handshake_paste_public_key_button_clicked),$("#dc-handshake-compute-btn").click(discordCrypt.on_handshake_compute_button_clicked(this)),$("#dc-handshake-cpy-keys-btn").click(discordCrypt.on_handshake_copy_keys_button_clicked),$("#dc-handshake-apply-keys-btn").click(discordCrypt.on_handshake_apply_keys_button_clicked(this)),e.click(discordCrypt.on_passwd_button_clicked),$("#dc-save-pwd").click(discordCrypt.on_save_passwords_button_clicked(this)),$("#dc-reset-pwd").click(discordCrypt.on_reset_passwords_button_clicked(this)),$("#dc-cancel-btn").click(discordCrypt.on_cancel_password_button_clicked),$("#dc-cpy-pwds-btn").click(discordCrypt.on_copy_current_passwords_button_clicked(this)),t.click(discordCrypt.on_lock_button_clicked(this))}attachHandler(){const e=this;let t=$(this.channelTextAreaClass);1===t.length&&t.off("keydown.dcrypt").on("keydown.dcrypt",function(t){let r=t.keyCode||t.which;e.configFile&&13===r&&(t.shiftKey||$(e.autoCompleteClass)[0]||e.sendEncryptedMessage($(this).val())&&(discordCrypt.__getElementReactOwner($("form")[0]).setState({textValue:""}),t.preventDefault(),t.stopPropagation()))})}parseKeyMessage(e){let t=discordCrypt.__extractKeyInfo(e.text().replace(/\r?\n|\r/g,""),!0);if(null===t)return!0;let r=discordCrypt.sha256(Buffer.from($("#dc-pub-key-ta").val(),"hex"),"hex");if(t.fingerprint===r)return e.css("display","none"),!0;let i=$("<button>Perform Key Exchange</button>").addClass("dc-button").addClass("dc-button-inverse");return i.css("margin-left","0"),i.css("margin-right","0"),i.css("margin-top","2%"),i.css("width","100%"),i.click(function(){let r=$("#dc-keygen-method"),i=$("#dc-keygen-algorithm");$("#dc-exchange-btn").click(),r.val()!==t.algorithm||parseInt(i.val())!==t.bit_length?(r.val(t.algorithm),r.change(),i.val(t.bit_length),$("#dc-keygen-gen-btn").click(),$("#dc-keygen-send-pub-btn").click()):""===$("#dc-pub-key-ta").val()&&($("#dc-keygen-gen-btn").click(),$("#dc-keygen-send-pub-btn").click()),$("#dc-tab-handshake-btn").click(),$("#dc-handshake-ppk").val(e.text()),$("#dc-handshake-compute-btn").click()}),e.parent().append(i),e.css("color","blue"),!0}parseSymmetric(e,t,r,i,s){let a=$(e),n;if(a.text().length<=12)return!1;let o=a.text().slice(0,4);if(o===this.encodedKeyHeader)return this.parseKeyMessage(a);if(o!==this.encodedMessageHeader)return!1;let c=discordCrypt.metaDataDecode(a.text().slice(4,8));if(c[0]>=this.encryptModes.length)return!1;if(c[1]>=this.encryptBlockModes.length)return!1;if(c[2]>=this.paddingModes.length)return!1;if(("string"==typeof(n=discordCrypt.symmetricDecrypt(a.text().replace(/\r?\n|\r/g,"").substr(8),t,r,c[0],c[1],c[2],!0))||n instanceof String)&&""!==n){if(i&&a.parent().parent().parent().parent().css("max-width","100%"),n=this.postProcessMessage(n,this.configFile.up1Host),i)a.html(n.html);else{let e=a.parent();a.parent().html(n.html),a=$(e)}if(n.code)if(null!==s.HighlightJS){let e=$(a.children()[0]).children();for(let t=0;t<e.length;t++)s.HighlightJS.highlightBlock($(e[t]).children()[0]),$(e[t]).children().addClass("hljs")}else discordCrypt.log("Could not locate HighlightJS module!","error");a.css("color","green")}else 1===n?a.text("[ ERROR ] AUTHENTICATION OF CIPHER TEXT FAILED !!!"):2===n?a.text("[ ERROR ] FAILED TO DECRYPT CIPHER TEXT !!!"):a.text("[ ERROR ] DECRYPTION FAILURE. INVALID KEY OR MALFORMED MESSAGE !!!"),a.css("color","red");return!0}postProcessMessage(e,t){const r={"&":"&amp;","<":"&lt",">":"&gt;"};e=e.replace(/[&<>]/g,e=>r[e]);let i=discordCrypt.__buildCodeBlockMessage(e),s=i.code,a;return{url:(i=discordCrypt.__buildUrlMessage(i.html,t)).url,code:s,html:i.html}}decodeMessages(){if(!this.configFile||!this.configFile.version)return;const e=this;let t=discordCrypt.getChannelId(),r=Buffer.from(this.configFile.passList[t]&&this.configFile.passList[t].primary?this.configFile.passList[t].primary:this.configFile.defaultPassword),i=Buffer.from(this.configFile.passList[t]&&this.configFile.passList[t].secondary?this.configFile.passList[t].secondary:this.configFile.defaultPassword),s=discordCrypt.getReactModules(this.cachedModules);$(this.messageMarkupClass).each(function(){this.className.includes("embedDescription")&&void 0===$(this).data("dc-parsed")&&(e.parseSymmetric(this,r,i,!0,s),$(this).data("dc-parsed",!0))}),$(`${this.messageMarkupClass} .inline`).each(function(){void 0===$(this).data("dc-parsed")&&(e.parseSymmetric(this,r,i,!1,s),$(this).data("dc-parsed",!0))})}sendEncryptedMessage(e,t=!1,r){const i=1820,s=["#","/",":"],a=require("crypto");let n;if(-1!==s.indexOf(e[0]))return!1;if(!1!==t||this.configFile.passList[discordCrypt.getChannelId()]&&this.configFile.passList[discordCrypt.getChannelId()].primary&&this.configFile.encodeAll)n=e;else{if((e=e.split("|")).length<=0)return!1;if(e[e.length-1]!==this.configFile.encodeMessageTrigger)return!1;n=e[0]}if(0===n.length)return!1;let o=discordCrypt.__extractTags(n);0!==o[0].length&&(n=o[0]);let c=o[1].length>0?o[1]:"",d=Buffer.from(this.configFile.passList[discordCrypt.getChannelId()]?this.configFile.passList[discordCrypt.getChannelId()].primary:this.configFile.defaultPassword),l=Buffer.from(this.configFile.passList[discordCrypt.getChannelId()]?this.configFile.passList[discordCrypt.getChannelId()].secondary:this.configFile.defaultPassword);if(n.length+16<1820){let e=discordCrypt.symmetricEncrypt(n,d,l,this.configFile.encryptMode,this.configFile.encryptBlockMode,this.configFile.paddingMode,!0);e=(e=this.encodedMessageHeader+discordCrypt.metaDataEncode(this.configFile.encryptMode,this.configFile.encryptBlockMode,this.configFile.paddingMode,parseInt(a.pseudoRandomBytes(1)[0]))+e).replace(/(.{32})/g,e=>`${e}\n`),discordCrypt.dispatchMessage(this.configFile.useEmbeds,e,this.messageHeader,`v${this.getVersion().replace("-debug","")}`,5577355,c,r,this.cachedModules,this.configFile.timedMessages,this.configFile.timedMessageExpires)}else{let e=discordCrypt.__splitStringChunks(n,1820);for(let t=0;t<e.length;t++){let i=discordCrypt.symmetricEncrypt(e[t],d,l,this.configFile.encryptMode,this.configFile.encryptBlockMode,this.configFile.paddingMode,!0);i=(i=this.encodedMessageHeader+discordCrypt.metaDataEncode(this.configFile.encryptMode,this.configFile.encryptBlockMode,this.configFile.paddingMode,parseInt(a.pseudoRandomBytes(1)[0]))+i).replace(/(.{32})/g,e=>`${e}\n`),discordCrypt.dispatchMessage(this.configFile.useEmbeds,i,this.messageHeader,`v${this.getVersion().replace("-debug","")}`,5577355,0===t?c:"",r,this.cachedModules,this.configFile.timedMessages,this.configFile.timedMessageExpires)}}return this.saveConfig(),!0}static on_master_unlock_button_clicked(e,t,r,i,s,a){return()=>{t.attr("disabled",!0),r?t.text("Unlocking Database ..."):t.text("Creating Database ...");let n=i.val();if(null===n||""===n)return t.text(s),void t.attr("disabled",!1);discordCrypt.scrypt(Buffer.from(n),Buffer.from(discordCrypt.whirlpool(n,!0),"hex"),32,4096,8,1,(n,o,c)=>{if(n)return r?t.text("Invalid Password!"):t.text(`Error: ${n}`),i.val(""),a.css("width","0%"),setTimeout(function(){t.text(s)},1e3),discordCrypt.log(n.toString(),"error"),!0;if(o&&a.css("width",`${parseInt(100*o)}%`),c){if(e.masterPassword=Buffer.from(c,"hex"),!e.loadConfig())return e.configFile=null,r?t.text("Invalid Password!"):t.text("Failed to create the database!"),i.val(""),a.css("width","0%"),setTimeout(function(){t.text(s)},1e3),t.attr("disabled",!1),!1;e.start(),r?t.text("Unlocked Successfully!"):t.text("Created Successfully!"),setTimeout(function(){$("#dc-master-overlay").remove()},1e3)}return!1})}}static on_master_cancel_button_clicked(e){return()=>{setTimeout(function(){$("#dc-master-overlay").remove(),e.masterPassword=null,e.configFile=null},300)}}static on_file_button_clicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-upload").css("display","block")}static on_alter_file_button_clicked(){let e=require("electron").remote.dialog.showOpenDialog({title:"Select a file to encrypt and upload",buttonLabel:"Select",message:"Maximum file size is 50 MB",properties:["openFile","showHiddenFiles","treatPackageAsDirectory"]});e.length&&e[0].length&&$("#dc-file-path").val(e[0])}static on_upload_encrypted_clipboard_button_clicked(e){return()=>{let t=discordCrypt.getChannelId();discordCrypt.__up1UploadClipboard(e.configFile.up1Host,e.configFile.up1ApiKey,global.sjcl,(r,i,s)=>{null===r&&"string"==typeof i&&"string"==typeof s?(e.sendEncryptedMessage(`${i}`,!0,t),require("electron").clipboard.writeText(`Delete URL: ${s}`)):_alert("Failed to upload the clipboard!",r)})}}static on_upload_file_button_clicked(e){return()=>{const t=require("original-fs");let r=$("#dc-file-path"),i=$("#dc-file-upload-btn"),s=$("#dc-file-message-textarea"),a=$("#dc-file-deletion-checkbox").is(":checked"),n=$("#dc-file-name-random-checkbox").is(":checked");s.val().length>0&&e.sendEncryptedMessage(s.val(),!0);let o=discordCrypt.getChannelId();s.val(""),t.existsSync(r.val())?(i.text("Uploading ..."),i.addClass("dc-button-inverse"),discordCrypt.__up1UploadFile(r.val(),e.configFile.up1Host,e.configFile.up1ApiKey,global.sjcl,(t,s,n)=>{if(null!==t||"string"!=typeof s||"string"!=typeof n)return i.text("Failed to upload the file!"),discordCrypt.log(t,"error"),r.val(""),void setTimeout(()=>{i.text("Upload"),i.removeClass("dc-button-inverse")},1e3);e.sendEncryptedMessage(`${s}${a?"\n\nDelete URL: "+n:""}`,!0,o),r.val(""),i.text("Upload Successful!"),setTimeout(()=>{i.text("Upload"),i.removeClass("dc-button-inverse"),$("#dc-file-cancel-btn").click()},1e3)},n)):r.val("")}}static on_cancel_file_upload_button_clicked(){$("#dc-file-path").val(""),$("#dc-overlay").css("display","none"),$("#dc-overlay-upload").css("display","none")}static on_settings_button_clicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-settings").css("display","block")}static on_plugin_settings_tab_button_clicked(){discordCrypt.set_active_settings_tab(0)}static on_database_settings_tab_button_clicked(e){return()=>{let t,r,i,s;(s=$("#dc-database-entries")).html(""),t=e.cachedModules.UserResolver.getUsers(),r=e.cachedModules.GuildResolver.getGuilds(),i=e.cachedModules.ChannelResolver.getChannels();for(let a in e.configFile.passList){let n,o=a;if(!i[o])continue;if(0===i[o].type){let e;n=`${r[i[o].guild_id].name} @ #${i[o].name}`}else{if(1!==i[o].type)continue;{let e=t[i[o].recipients[0]];n=`DM @${e.username}#${e.discriminator}`}}let c=$(`<tr><td>${o}</td><td>${n}</td><td><div style="display:flex;"></div></td></tr>`),d=$("<button>").addClass("dc-button dc-button-small dc-button-inverse").text("Delete"),l=$("<button>").addClass("dc-button dc-button-small dc-button-inverse").text("Copy");d.click(function(){delete e.configFile.passList[o],e.saveConfig(),d.parent().parent().remove()}),l.click(function(){let t=e.configFile.passList[o];require("electron").clipboard.writeText(`Primary Key: ${t.primary}\n\nSecondary Key: ${t.secondary}`),l.text("Copied"),setTimeout(()=>{l.text("Copy")},1e3)}),$($(c.children()[2]).children()[0]).append(l),$($(c.children()[2]).children()[0]).append(d),s.append(c)}discordCrypt.set_active_settings_tab(1)}}static on_import_database_button_clicked(e){return()=>{const t=require("fs");let r=require("electron").remote.dialog.showOpenDialog({title:"Import Database",message:"Select the configuration file(s) to import",buttonLabel:"Import",filters:[{name:"Database Entries ( *.json )",extensions:["json"]}],properties:["openFile","multiSelections","showHiddenFiles","treatPackageAsDirectory"]});if(!r.length)return;let i=$("#dc-import-database-btn"),s=0;i.text(`Importing ( ${r.length} ) File(s)`);for(let i=0;i<r.length;i++){let a=r[i],n;if(t.statSync(a).isFile()){try{n=JSON.parse(t.readFileSync(a).toString())}catch(e){discordCrypt.log(`Error reading JSON file '${a} ...`,"warn");continue}if(n.discordCrypt_entries&&n.discordCrypt_entries.length)for(let t=0;t<n.discordCrypt_entries.length;t++){let r=n.discordCrypt_entries[t];r.id&&r.primary&&r.secondary&&(e.configFile.passList.hasOwnProperty(r.id)||s++,e.configFile.passList[r.id]=discordCrypt.createPassword(r.primary,r.secondary))}}}setTimeout(()=>{i.text(`Imported (${s}) ${1===s?"Entry":"Entries"}`),setTimeout(()=>{i.text("Import Database(s)")},1e3)},500),0!==s&&(discordCrypt.on_database_settings_tab_button_clicked(e)(),e.saveConfig())}}static on_export_database_button_clicked(e){return()=>{let t=require("electron").remote.dialog.showSaveDialog({title:"Export Database",message:"Select the destination file",buttonLabel:"Export",filters:[{name:"Database Entries ( *.json )",extensions:["json"]}]});if(!t.length)return;const r=require("fs");let i=$("#dc-export-database-btn"),s={discordCrypt_entries:[]},a;for(let t in e.configFile.passList){let r=e.configFile.passList[t];s.discordCrypt_entries.push({id:t,primary:r.primary,secondary:r.secondary})}a=s.discordCrypt_entries.length;try{r.writeFileSync(t,JSON.stringify(s,null,"    ")),i.text(`Exported (${a}) ${1===a?"Entry":"Entries"}`)}catch(e){discordCrypt.log(`Error exporting entries: ${e.toString()}`,"error"),i.text("Error: See Console")}setTimeout(()=>{i.text("Export Database")},1e3)}}static on_clear_entries_button_clicked(e){return()=>{let t=$("#dc-erase-entries-btn");e.configFile.passList={},$("#dc-database-entries").html(""),e.saveConfig(),t.text("Cleared Entries"),setTimeout(()=>{t.text("Erase Entries")},1e3)}}static on_settings_close_button_clicked(){discordCrypt.set_active_settings_tab(0),$("#dc-overlay").css("display","none"),$("#dc-overlay-settings").css("display","none")}static on_save_settings_button_clicked(e){return()=>{let t=$("#dc-primary-cipher"),r=$("#dc-secondary-cipher"),i=$("#dc-master-password");if(e.configFile.encodeMessageTrigger=$("#dc-settings-encrypt-trigger").val(),e.configFile.timedMessageExpires=$("#dc-settings-timed-expire").val(),e.configFile.encryptBlockMode=$("#dc-settings-cipher-mode").val(),e.configFile.defaultPassword=$("#dc-settings-default-pwd").val(),e.configFile.encryptScanDelay=$("#dc-settings-scan-delay").val(),e.configFile.paddingMode=$("#dc-settings-padding-mode").val(),e.configFile.useEmbeds=$("#dc-embed-enabled").is(":checked"),e.configFile.encryptMode=discordCrypt.cipherStringToIndex(t.val(),r.val()),t.val(discordCrypt.cipherIndexToString(e.configFile.encryptMode,!1)),r.val(discordCrypt.cipherIndexToString(e.configFile.encryptMode,!0)),""!==i.val()){let t=i.val();i.val(""),discordCrypt.scrypt(Buffer.from(t),Buffer.from(discordCrypt.whirlpool(t,!0),"hex"),32,4096,8,1,(t,r,i)=>t?(_alert("DiscordCrypt Error","Error setting the new database password. Check the console for more info."),discordCrypt.log(t.toString(),"error"),!0):(i&&(e.masterPassword=Buffer.from(i,"hex"),e.saveSettings($("#dc-settings-save-btn"))),!1))}else e.saveSettings($("#dc-settings-save-btn"))}}static on_reset_settings_button_clicked(e){return()=>{e.resetSettings($("#dc-settings-reset-btn")),$("#dc-secondary-cipher").val(discordCrypt.cipherIndexToString(e.configFile.encryptMode,!0)),$("#dc-primary-cipher").val(discordCrypt.cipherIndexToString(e.configFile.encryptMode,!1)),$("#dc-settings-cipher-mode").val(e.configFile.encryptBlockMode.toLowerCase()),$("#dc-settings-padding-mode").val(e.configFile.paddingMode.toLowerCase()),$("#dc-settings-encrypt-trigger").val(e.configFile.encodeMessageTrigger),$("#dc-settings-timed-expire").val(e.configFile.timedMessageExpires),$("#dc-settings-default-pwd").val(e.configFile.defaultPassword),$("#dc-settings-scan-delay").val(e.configFile.encryptScanDelay),$("#dc-embed-enabled").prop("checked",e.configFile.useEmbeds),$("#dc-master-password").val("")}}static on_restart_now_button_clicked(){location.reload()}static on_restart_later_button_clicked(){$("#dc-overlay").css("display","none"),$("#dc-update-overlay").css("display","none")}static on_info_tab_button_clicked(){discordCrypt.set_active_exchange_tab(0)}static on_exchange_tab_button_clicked(){discordCrypt.set_active_exchange_tab(1)}static on_handshake_tab_button_clicked(){discordCrypt.set_active_exchange_tab(2)}static on_close_exchange_button_clicked(){$("#dc-overlay").css("display","none"),$("#dc-overlay-exchange").css("display","none")}static on_open_exchange_button_clicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-exchange").css("display","block")}static on_quick_send_public_key_button_clicked(){$("#dc-keygen-gen-btn").click(),$("#dc-keygen-send-pub-btn").click()}static on_exchange_algorithm_changed(){let e=discordCrypt.getDHBitSizes(),t=discordCrypt.getECDHBitSizes(),r=$("#dc-keygen-method"),i=$("#dc-keygen-algorithm");switch($("#dc-keygen-algorithm option").each(function(){$(this).remove()}),r.val()){case"dh":for(let t=0;t<e.length;t++){let r=e[t];i.append(new Option(r,r,t===e.length-1))}break;case"ecdh":for(let e=0;e<t.length;e++){let r=t[e];$("#dc-keygen-algorithm").append(new Option(r,r,e===t.length-1))}break;default:return}}static on_generate_new_key_pair_button_clicked(){let e=discordCrypt.getDHBitSizes(),t=discordCrypt.getECDHBitSizes(),r=32,i=16,s,a,n,o,c,d=require("crypto"),l=$("#dc-keygen-method"),p=$("#dc-keygen-algorithm");switch(l.val()){case"dh":c=discordCrypt.generateDH(parseInt(p.val())),a=e.indexOf(parseInt(p.val()));break;case"ecdh":c=discordCrypt.generateECDH(parseInt(p.val())),a=t.indexOf(parseInt(p.val()))+e.length;break;default:return}c&&void 0!==c&&void 0!==c.getPrivateKey&&void 0!==c.getPublicKey&&(discordCrypt.privateExchangeKey=c,s=parseInt(d.randomBytes(1).toString("hex"),16)%16+16,o=Buffer.from(c.getPublicKey("hex","ecdh"===l.val()?"compressed":void 0),"hex"),(n=Buffer.alloc(2+s+o.length)).writeInt8(a,0),n.writeInt8(s,1),d.randomBytes(s).copy(n,2),o.copy(n,2+s),$("#dc-pub-key-ta").val(n.toString("hex")),$("#dc-priv-key-ta").val(c.getPrivateKey("hex")))}static on_keygen_clear_button_clicked(){$("#dc-pub-key-ta").val(""),$("#dc-priv-key-ta").val("")}static on_keygen_send_public_key_button_clicked(e){return()=>{let t=$("#dc-pub-key-ta");if(""===t.val())return;let r=Buffer.from(t.val(),"hex"),i=(r=e.encodedKeyHeader+discordCrypt.substituteMessage(r,!0)).replace(/(.{32})/g,e=>`${e}\n`),s=`${"ecdh"!==$("#dc-keygen-method").val()?"DH-":"ECDH-"}`+`${$("#dc-keygen-algorithm").val()}`,a=`-----BEGIN ${s} PUBLIC KEY-----`,n=`-----END ${s} PUBLIC KEY----- | v${e.getVersion().replace("-debug","")}`;discordCrypt.dispatchMessage(e.configFile.useEmbeds,i,a,n,7471104,"",void 0,e.cachedModules,e.configFile.timedMessages,e.configFile.timedMessageExpires),e.saveConfig(),$("#dc-keygen-send-pub-btn").text("Sent The Public Key!"),setTimeout(function(){$("#dc-keygen-send-pub-btn").text("Send Public Key")},1e3)}}static on_handshake_paste_public_key_button_clicked(){$("#dc-handshake-ppk").val(require("electron").clipboard.readText())}static on_handshake_compute_button_clicked(e){return()=>{let t,r,i,s,a,n,o,c,d=$("#dc-pub-key-ta"),l=$("#dc-priv-key-ta"),p=$("#dc-handshake-ppk"),u=$("#dc-handshake-compute-btn");function g(e){const t=discordCrypt.getBraille().splice(16,64);let r="";for(let i=0;i<parseInt(e.length/2);i++)r+=t[parseInt(e.substr(2*i,2))&t.length-1];return r}if(!p.val()||!p.val().length)return;if(!d.val()||!d.val().length)return u.text("You Didn't Generate A Key!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);if(p.val().replace(/\r?\n|\r/g,"").slice(0,4)!==e.encodedKeyHeader)return;let h=p.val().replace(/\r?\n|\r/g,"").slice(4);if(!discordCrypt.isValidBraille(h))return;try{t=Buffer.from(discordCrypt.substituteMessage(h),"hex")}catch(e){return u.text("Invalid Public Key!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3)}if(r=t.readInt8(0),!discordCrypt.isValidExchangeAlgorithm(r))return u.text("Invalid Algorithm!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);let f=Buffer.from(d.val(),"hex");if(f.readInt8(0)!==r)return u.text("Mismatched Algorithm!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);if($("#dc-handshake-algorithm").text(`Exchange Algorithm: ${discordCrypt.indexToExchangeAlgorithmString(r)}`),(s=t.readInt8(1))<16||s>32)return u.text("Invalid Salt Length!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);if(a=Buffer.from(t.subarray(2,2+s)),n=f.readInt8(1),o=Buffer.from(f.subarray(2,2+n)),$("#dc-handshake-salts").text(`Salts: [ ${g(a.toString("hex"))}, `+`${g(o.toString("hex"))} ]`),i=Buffer.from(t.subarray(2+s)).toString("hex"),!discordCrypt.privateExchangeKey||void 0===discordCrypt.privateExchangeKey||void 0===discordCrypt.privateExchangeKey.computeSecret)return u.text("Failed To Calculate Private Key!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);let y=discordCrypt.computeExchangeSharedSecret(discordCrypt.privateExchangeKey,i,!1,!1);if(!y||!y.length)return u.text("Failed To Derive Key!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3);if($("#dc-handshake-secret").text(`Derived Secret: [ ${g(y.length>64?y.substring(0,64):y)} ]`),n===s){for(let e=2;e<parseInt(n/4);e+=4){let t=o.readUInt32BE(e),r=a.readUInt32BE(e);if(t!==r){c=t>r;break}}if(void 0===c)return u.text("Both Salts Are Equal ?!"),void setTimeout(function(){u.text("Compute Secret Keys")},1e3)}else c=n>s;let m=Buffer.from(discordCrypt.sha512(c?o:a,!0),"hex"),b=Buffer.from(discordCrypt.whirlpool(c?a:o,!0),"hex"),C=0,k=0;discordCrypt.scrypt(Buffer.from(y+b.toString("hex"),"hex"),m,256,3072,16,2,(e,t,r)=>e?(u.text("Failed Generating Primary Key!"),setTimeout(function(){u.text("Compute Secret Keys")},1e3),!0):(t&&(C=50*t,$("#dc-exchange-status").css("width",`${parseInt(C+k)}%`)),r&&($("#dc-handshake-prim-lbl").text(`Primary Key: ( Quality - ${discordCrypt.entropicBitLength(r.toString("base64"))} Bits )`),$("#dc-handshake-primary-key").val(r.toString("base64")),u.text("Compute Secret Keys"),$("#dc-handshake-algorithm").text("..."),$("#dc-handshake-secret").text("..."),$("#dc-handshake-salts").text("..."),$("#dc-exchange-status").css("width","0%")),!1));let v=c?o:a,S=c?a:o,x=Buffer.from(v.toString("hex")+y+S.toString("hex"),"hex");discordCrypt.scrypt(x,b,256,3072,8,1,(e,t,r)=>e?(u.text("Failed Generating Secondary Key!"),setTimeout(function(){u.text("Compute Secret Keys")},1e3),!0):(t&&(k=50*t,$("#dc-exchange-status").css("width",`${parseInt(C+k)}%`)),r&&($("#dc-handshake-sec-lbl").text(`Secondary Key: ( Quality - ${discordCrypt.entropicBitLength(r.toString("base64"))} Bits )`),$("#dc-handshake-secondary-key").val(r.toString("base64"))),!1)),u.text("Generating Keys ..."),discordCrypt.privateExchangeKey=void 0,p.val(""),l.val(""),d.val("")}}static on_handshake_copy_keys_button_clicked(){let e=$("#dc-handshake-primary-key"),t=$("#dc-handshake-secondary-key");""!==e.val()&&""!==t.val()&&(require("electron").clipboard.writeText(`Primary Key: ${e.val()}\r\n\r\n`+`Secondary Key: ${t.val()}`),e.val(""),t.val(""),$("#dc-handshake-cpy-keys-btn").text("Coped Keys To Clipboard!"),setTimeout(function(){$("#dc-handshake-cpy-keys-btn").text("Copy Keys & Nuke"),$("#dc-handshake-prim-lbl").text("Primary Key: "),$("#dc-handshake-sec-lbl").text("Secondary Key: ")},1e3))}static on_handshake_apply_keys_button_clicked(e){return()=>{let t=$("#dc-handshake-primary-key"),r=$("#dc-handshake-secondary-key");if(!t.val()||!t.val().length)return;if(!r.val()||!r.val().length)return;let i=discordCrypt.createPassword(t.val(),r.val());t.val(""),r.val(""),e.configFile.passList[discordCrypt.getChannelId()]=i,e.saveConfig(),$("#dc-handshake-apply-keys-btn").text("Applied & Saved!"),setTimeout(function(){$("#dc-handshake-apply-keys-btn").text("Apply Generated Passwords"),$("#dc-handshake-prim-lbl").text("Primary Key: "),$("#dc-handshake-sec-lbl").text("Secondary Key: "),$("#dc-overlay").css("display","none"),$("#dc-overlay-exchange").css("display","none"),discordCrypt.set_active_exchange_tab(0)},1e3)}}static on_passwd_button_clicked(){$("#dc-overlay").css("display","block"),$("#dc-overlay-password").css("display","block")}static on_save_passwords_button_clicked(e){return()=>{let t=$("#dc-save-pwd");e.updatePasswords(),t.text("Saved!"),setTimeout(function(){t.text("Save Password"),$("#dc-password-primary").val(""),$("#dc-password-secondary").val(""),$("#dc-overlay").css("display","none"),$("#dc-overlay-password").css("display","none")},1e3)}}static on_reset_passwords_button_clicked(e){return()=>{let t=$("#dc-reset-pwd");delete e.configFile.passList[discordCrypt.getChannelId()],e.saveConfig(),t.text("Password Reset!"),setTimeout(function(){t.text("Reset Password"),$("#dc-password-primary").val(""),$("#dc-password-secondary").val(""),$("#dc-overlay").css("display","none"),$("#dc-overlay-password").css("display","none")},1e3)}}static on_cancel_password_button_clicked(){$("#dc-password-primary").val(""),$("#dc-password-secondary").val(""),setTimeout(function(){$("#dc-overlay").css("display","none"),$("#dc-overlay-password").css("display","none")},250)}static on_copy_current_passwords_button_clicked(e){return()=>{let t=e.configFile.passList[discordCrypt.getChannelId()];t?(require("electron").clipboard.writeText(`Primary Key: ${t.primary}\r\n\r\nSecondary Key: ${t.secondary}`),$("#dc-cpy-pwds-btn").text("Copied Keys To Clipboard!"),setTimeout(function(){$("#dc-cpy-pwds-btn").text("Copy Current Passwords!"),$("#dc-cancel-btn").click()},1e3)):require("electron").clipboard.writeText(`Default Password: ${e.configFile.defaultPassword}`)}}static on_lock_button_clicked(e){return()=>{let t=$("#dc-lock-btn");e.configFile.encodeAll?(t.attr("title","Enable Message Encryption"),t.html(Buffer.from(e.unlockIcon,"base64").toString("utf8")),e.configFile.encodeAll=!1):(t.attr("title","Disable Message Encryption"),t.html(Buffer.from(e.lockIcon,"base64").toString("utf8")),e.configFile.encodeAll=!0),$(".dc-svg").attr("class","dc-svg"),e.saveConfig()}}static set_active_settings_tab(e){let t=["dc-plugin-settings-tab","dc-database-settings-tab"],r=$("#dc-settings-tab .dc-tab-link");for(let e=0;e<t.length;e++)$(`#${t[e]}`).css("display","none");switch(r.removeClass("active"),e){case 0:$("#dc-plugin-settings-btn").addClass("active"),$("#dc-plugin-settings-tab").css("display","block");break;case 1:$("#dc-database-settings-btn").addClass("active"),$("#dc-database-settings-tab").css("display","block")}}static set_active_exchange_tab(e){let t=["dc-about-tab","dc-keygen-tab","dc-handshake-tab"],r=$("#dc-exchange-tab .dc-tab-link");for(let e=0;e<t.length;e++)$(`#${t[e]}`).css("display","none");switch(r.removeClass("active"),e){case 0:$("#dc-tab-info-btn").addClass("active"),$("#dc-about-tab").css("display","block");break;case 1:$("#dc-tab-keygen-btn").addClass("active"),$("#dc-keygen-tab").css("display","block");break;case 2:$("#dc-tab-handshake-btn").addClass("active"),$("#dc-handshake-tab").css("display","block")}}static getPluginName(){return"discordCrypt.plugin.js"}static validPluginName(){return require("fs").existsSync(require("path").join(discordCrypt.getPluginsPath(),discordCrypt.getPluginName()))}static getPluginsPath(){const e=require("process");return`${"win32"===e.platform?e.env.APPDATA:"darwin"===e.platform?e.env.HOME+"/Library/Preferences":e.env.HOME+"/.config"}/BetterDiscord/plugins/`}static checkForUpdate(e){const t=`https://gitlab.com/leogx9r/DiscordCrypt/raw/master/build/${discordCrypt.getPluginName()}`,r="https://gitlab.com/leogx9r/DiscordCrypt/raw/master/src/CHANGELOG";if("function"!=typeof e)return!1;try{discordCrypt.__getRequest(t,(t,i,s)=>{if(200!==t){switch(t){case 404:discordCrypt.log("Update URL is broken.","error");break;case 403:discordCrypt.log("Forbidden request when checking for updates.","error");break;default:discordCrypt.log(`Error while fetching update: ${i}`,"error")}return!1}s=s.replace("\r","");let a='//META{"name":"discordCrypt"}*//\n';try{a=require("fs").readFileSync(require("path").join(discordCrypt.getPluginsPath(),discordCrypt.getPluginName())).toString().replace("\r","")}catch(e){discordCrypt.log("Plugin file could not be locally read. Assuming testing version ...","warn")}if(s.split("\n")[0]!==a.split("\n")[0])return discordCrypt.log("Plugin metadata is missing from either the local or update file.","error"),!1;let n=discordCrypt.sha256(a),o=discordCrypt.sha256(s),c=Buffer.from(o,"base64").toString("hex").slice(0,8);if(o===n)return discordCrypt.log(`No Update Needed - #${c}`),!0;let d="";try{d=s.match(/((["'])(\d+\.)(\d+\.)(\*|\d+)(["']))/gi).toString().replace(/(['|"]*['|"])/g,"")}catch(e){discordCrypt.log("Failed to locate the version number in the update ...","warn")}try{discordCrypt.__getRequest(r,(t,r,i)=>{e(s,c,d,200==t?i:"")})}catch(t){return discordCrypt.log("Error fetching the changelog.","warn"),e(s,c,d,""),!1}return!0})}catch(e){return discordCrypt.log(`Error while retrieving update: ${e.toString()}`,"warn"),!1}return!0}static getChannelId(){return window.location.pathname.split("/").pop()}static createPassword(e,t){return{primary:e,secondary:t}}static getWebpackModuleSearcher(){const e="function"==typeof webpackJsonp?webpackJsonp([],{__extra_id__:(e,t,r)=>t.default=r},["__extra_id__"]).default:webpackJsonp.push([[],{__extra_id__:(e,t,r)=>e.exports=r},[["__extra_id__"]]]);delete e.m.__extra_id__,delete e.c.__extra_id__;const t=(t,r)=>{for(let r in e.c)if(e.c.hasOwnProperty(r)){let i=e.c[r].exports;if(i&&i.__esModule&&i.default&&(i=i.default),i&&t(i))return i}if(r){discordCrypt.log("Couldn't find module in existing cache. Loading all modules.","warn");for(let r=0;r<e.m.length;++r)try{let i=e(r);if(i&&i.__esModule&&i.default&&t(i.default))return i.default;if(i&&t(i))return i}catch(e){discordCrypt.log(`Could not load module index ${r} ...`,"warn")}discordCrypt.log("Cannot find React module.","warn")}return null},r=(e,r=!1)=>t(t=>e.every(e=>void 0!==t[e]),r),i=(e,r=!1)=>t(t=>t.displayName===e,r),s=(e,r=!1)=>t(t=>void 0!==t._dispatchToken&&t._dispatchToken===`ID_${e}`&&void 0!==t._actionHandlers,r),a=e=>{for(let t=0;t<500;t++){let r=s(t);if(r&&e.every(e=>r._actionHandlers.hasOwnProperty(e)))return r}return null};return{find:t,findByUniqueProperties:r,findByDisplayName:i,findByDispatchToken:s,findByDispatchNames:a}}static dumpWebpackModuleCallbacks(e=!0){const t=["_dependencies","initialize","initializeIfNeeded","syncWith","waitFor","hasChangeCallbacks","emitChange","addChangeListener","addConditionalChangeListener","removeChangeListener","getDispatchToken","mustEmitChanges"];let r=discordCrypt.getWebpackModuleSearcher().findByDispatchToken,i=[];for(let s=0;s<1e3;s++){let a=r(s);if(a){i[s]={};for(let r in a)if(-1===t.indexOf(r))if("_actionHandlers"==r||"_changeCallbacks"==r){if(!e)continue;i[s][r]={};for(let e in a[r])a._actionHandlers.hasOwnProperty(e)&&(i[s][r][e]=a[r][e].prototype.constructor.toString().split("{")[0])}else i[s][r]=a[r].toString().split("{")[0]}}return i}static getReactModules(e){const t=["@me","activity"];return e?{ChannelProps:-1!==t.indexOf(discordCrypt.getChannelId())?null:discordCrypt.__getElementReactOwner($("form")[0]).props.channel,MessageParser:e.MessageParser,MessageController:e.MessageController,MessageActionTypes:e.MessageActionTypes,MessageDispatcher:e.MessageDispatcher,MessageQueue:e.MessageQueue,UserResolver:e.UserResolver,GuildResolver:e.GuildResolver,ChannelResolver:e.ChannelResolver,HighlightJS:e.HighlightJS}:null}static editMessage(e,t,r,i){i.MessageController.editMessage(e,t,{content:r})}static deleteMessage(e,t,r){r.MessageController.deleteMessage(e,t)}static dispatchMessage(e,t,r,i,s=5577355,a="",n,o={},c,d=0){let l=!1;const p=discordCrypt.getReactModules(o);if("string"==typeof a&&a.length){if(null===p.MessageParser)return void discordCrypt.log("Could not locate the MessageParser module!","error");try{((a=p.MessageParser.parse(p.ChannelProps,a).content).includes("@everyone")||a.includes("@here"))&&(l=!0)}catch(e){a=""}}else a="";let u=void 0!==n?n:discordCrypt.getChannelId();if(null===p.MessageQueue)return void discordCrypt.log("Could not locate the MessageQueue module!","error");if(null===p.MessageController)return void discordCrypt.log("Could not locate the MessageController module!","error");const g=e=>{if(e.ok)p.MessageController.receiveMessage(u,e.body),c&&d>0&&c.push({messageId:e.body.id,channelId:u,expireTime:Date.now()+6e4*d});else if(e.status>=400&&e.status<500&&e.body&&!p.MessageController.sendClydeError(u,e.body.code)){if(discordCrypt.log(`Error sending message: ${e.status}`,"error"),null===p.MessageDispatcher||null===p.MessageActionTypes)return void discordCrypt.log("Could not locate the MessageDispatcher module!","error");p.MessageDispatcher.dispatch({type:p.MessageActionTypes.ActionTypes.MESSAGE_SEND_FAILED,messageId:_nonce,channelId:u})}};if(e){let e=parseInt(require("crypto").pseudoRandomBytes(6).toString("hex"),16);p.MessageQueue.enqueue({type:"send",message:{channelId:u,nonce:e,content:a,mention_everyone:l,tts:!1,embed:{type:"rich",url:"https://gitlab.com/leogx9r/DiscordCrypt",color:s||5577355,output_mime_type:"text/x-html",timestamp:(new Date).toISOString(),encoding:"utf-16",author:{name:r||"-----MESSAGE-----",icon_url:"https://gitlab.com/leogx9r/DiscordCrypt/raw/master/images/encode-logo.png",url:"https://discord.me/discordCrypt"},footer:{text:i||"DiscordCrypt",icon_url:"https://gitlab.com/leogx9r/DiscordCrypt/raw/master/images/app-logo.png"},description:t}}},g)}else[t,a].forEach(e=>{if(!e.length)return;let t=parseInt(require("crypto").pseudoRandomBytes(6).toString("hex"),16);p.MessageQueue.enqueue({type:"send",message:{channelId:u,nonce:t,content:e===a?e:`\`${e}\``,mention_everyone:e===a&&l,tts:!1}},g)})}static injectCSS(e,t){$("head").append($("<style>",{id:e.replace(/^[^a-z]+|[^\w-]+/gi,""),html:t}))}static clearCSS(e){e&&"string"==typeof e&&e.length&&$(`#${e.replace(/^[^a-z]+|[^\w-]+/gi,"")}`).remove()}static hookDispatcher(e,t,r){const{before:i,after:s,instead:a,once:n=!1,silent:o=!1}=r,c=e._actionHandlers[t],d=()=>{o||discordCrypt.log(`Unhooking "${t}" ...`),e[t]=c},l=(e,t)=>(...r)=>{try{return e(...r)}catch(e){discordCrypt.log(`Error occurred in ${t}`,"error")}};return e._actionHandlers[t].__hooked||(o||discordCrypt.log(`Hooking "${t}" ...`),e._actionHandlers[t]=function(){const e={thisObject:this,methodArguments:arguments,cancelPatch:d,originalMethod:c,callOriginalMethod:()=>e.returnValue=e.originalMethod.apply(e.thisObject,e.methodArguments)};if(a){const r=l(a,`${t} called hook via 'instead'.`)(e);void 0!==r&&(e.returnValue=r)}else i&&l(i,`${t} called hook via 'before'.`)(e),e.callOriginalMethod(),s&&l(s,`${t} called hook via 'after'.`)(e);return n&&d(),e.returnValue},e._actionHandlers[t].__hooked=!0,e._actionHandlers[t].__cancel=d),e._actionHandlers[t].__cancel}static log(e,t="info"){try{console[t](`%c[DiscordCrypt]%c - ${e}`,"color: #7f007f; font-weight: bold;","")}catch(e){console.error("[DiscordCrypt] - Error logging message ...")}}static __zlibCompress(e,t="base64",r){let i=require("zlib").deflateSync(Buffer.isBuffer(e)?e:Buffer.from(e,t),{windowBits:15});return r?i.toString(r):i}static __zlibDecompress(e,t="base64",r="utf8"){let i=require("zlib").inflateSync(Buffer.isBuffer(e)?e:Buffer.from(e,t),{windowBits:15});return r?i.toString(r):i}static __loadLibraries(e){const t=require("vm");for(let r in e){let i=e[r];if(i.requiresBrowser&&"undefined"==typeof window){discordCrypt.log(`Skipping loading of browser-required plugin: ${r} ...`,"warn");continue}if(i.requiresElectron)try{require("electron")}catch(e){discordCrypt.log(`Skipping loading of electron-required plugin: ${r} ...`,"warn");continue}let s=discordCrypt.__zlibDecompress(i.code);i.requiresBrowser||i.requiresElectron?t.runInThisContext(s,{filename:r,displayErrors:!1}):global[r.replace(".js","")]=t.runInNewContext(s,{filename:r,displayErrors:!1})}}static __shouldIgnoreUpdates(e){const t=require("fs"),r=require("path"),i=r.join(discordCrypt.getPluginsPath(),discordCrypt.getPluginName());return t.existsSync(i)&&(t.lstatSync(i).isSymbolicLink()||-1!==e.indexOf("-debug"))}static __getRequest(e,t){try{require("request")(e,(e,r,i)=>{t(r.statusCode,r.statusMessage,i)})}catch(e){t(-1,e.toString())}}static __getElementReactOwner(e,{include:t,exclude:r=["Popout","Tooltip","Scroller","BackgroundFlash"]}={}){if(void 0===e)return;const i=e=>e[Object.keys(e).find(e=>e.startsWith("__reactInternalInstance"))],s=void 0===t,a=s?r:t;function n(e){const t=e.type.displayName||e.type.name||null;return null!==t&&!!(a.includes(t)^s)}for(let t=i(e).return;!_.isNil(t);t=t.return)if(!_.isNil(t)&&!_.isNil(t.stateNode)&&!(t.stateNode instanceof HTMLElement)&&n(t))return t.stateNode}static __extractKeyInfo(e,t=!1){try{let r=[],i=e;return t&&(i=i.slice(4)),i=discordCrypt.substituteMessage(i),i=Buffer.from(i,"hex"),discordCrypt.isValidExchangeAlgorithm(i[0])?(r.fingerprint=discordCrypt.sha256(i,!0),r.bit_length=discordCrypt.indexToAlgorithmBitLength(i[0]),r.algorithm=discordCrypt.indexToExchangeAlgorithmString(i[0]).split("-")[0].toLowerCase(),r):null}catch(e){return null}}static __splitStringChunks(e,t){if(!t||t<0)return e;const r=Math.ceil(e.length/t),i=new Array(r);for(let s=0,a=0;s<r;++s,a+=t)i[s]=e.substr(a,t);return i}static __isValidUserName(e){if("string"!=typeof e)return!1;if("@"!==e[0])return!1;for(let t=1;t<e.length;t++){if(" "===e[t]||"@"===e[t])return!1;if(1!==t&&"#"===e[t]&&e.length-t-1==4)try{let r=e.slice(t+1,t+5);return!isNaN(r)&&parseInt(r,10)==r}catch(e){return!1}}return!1}static __extractTags(e){let t=e.split(" "),r="",i="",s=[];for(let e=0,r=0;e<t.length;e++)this.__isValidUserName(t[e])?(s[r++]=t[e],i+=`${t[e].split("#")[0]} `):-1!==["@everyone","@here","@me"].indexOf(t[e])?(s[r++]=t[e],i+=`${t[e]} `):i+=`${t[e]} `;for(let e=0;e<s.length;e++)r+=`${s[e]} `;return[i.trim(),r.trim()]}static __extractCodeBlocks(e){let t=new RegExp(/^(([ \t]*`{3,4})([^\n]*)([\s\S]+?)(^[ \t]*\2))/gm),r=new RegExp(/(`([^`].*?)`)/g),i,s=[];for(;i=t.exec(e);)s.push({start_pos:i.index,end_pos:i.index+i[1].length,language:0===i[3].trim().length?"text":i[3].trim(),raw_code:i[4],captured_block:i[1]});for(;i=r.exec(e);)s.push({start_pos:i.index,end_pos:i.index+i[0].length,language:"inline",raw_code:e.substr(i.index,i.index+i[0].length).split("`")[1],captured_block:i[0]});return s}static __extractUrls(e){let t=new RegExp(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/gi),r,i=[];for(;r=t.exec(e);)i.push(r[0]);return i}static __buildCodeBlockMessage(e){try{let t=discordCrypt.__extractCodeBlocks(e);if(!t.length)return{code:!1,html:e};for(let r=0;r<t.length;r++)if("inline"!==t[r].language){let i="",s=t[r].raw_code.replace("\r","").split("\n");for(let e=1;e<s.length-1;e++)i+=`<li>${s[e]}</li>`;e=(e=e.split(t[r].captured_block)).join('<div class="markup line-scanned" data-colour="true" style="color: rgb(111, 0, 0);">'+`<pre class="hljs"><code class="dc-code-block hljs \n                        ${"text"===t[r].language?"":t[r].language}"\n                         style="position: relative;">`+`<ol>${i}</ol></code></pre></div>`)}else e=(e=e.split(t[r].captured_block)).join(`<code class="inline">${t[r].raw_code}</code>`);return{code:!0,html:e}}catch(t){return{code:!1,html:e}}}static __buildUrlMessage(e,t){try{let r=discordCrypt.__extractUrls(e);if(!r.length)return{url:!1,html:e};for(let i=0;i<r.length;i++){let s="";e=e.split(r[i]),void 0!==t&&r[i].startsWith(`${t}/#`)&&-1===r[i].indexOf("del?ident=")&&(s=`<iframe src=${r[i]} width="100%" height="400px"></iframe><br/><br/>`),e=e.join(`${s}<a target="_blank" href="${r[i]}">${r[i]}</a>`)}return{url:!0,html:`<span>${e}</span>`}}catch(t){return{url:!1,html:e}}}static __toBuffer(e,t){if(Buffer.isBuffer(e))return e;if("string"==typeof e)return Buffer.from(e,void 0===t?"utf8":t?"hex":"base64");if(Array.isArray(e))return Buffer.from(e);throw"Input is neither an Array(), Buffer() or a string."}static __getFileMimeType(e){let t=require("mime-types").lookup(require("path").extname(e));return!1===t?"application/octet-stream":t}static __clipboardToBuffer(){let e=require("electron").clipboard;if(!e)return{mime_type:"",name:"",data:null};let t=require("original-fs"),r=require("path");if(0===e.availableFormats().length)return{mime_type:"",name:"",data:null};let i=e.availableFormats(),s,a="",n="",o=!1;for(let c=0;c<i.length;c++){let d=i[c].split("/");switch(d[0]){case"image":switch(d[1].toLowerCase()){case"png":s=e.readImage().toPNG();break;case"bmp":case"bitmap":s=e.readImage().toBitmap();break;case"jpg":case"jpeg":s=e.readImage().toJPEG(100)}break;case"text":a=e.readText();try{let e;t.statSync(a).isFile()?(s=t.readFileSync(a),n=r.basename(a),o=!0):s=Buffer.from(a,"utf8")}catch(e){s=Buffer.from(a,"utf8")}}if(s&&s.length>0)return o&&(i[c]=discordCrypt.__getFileMimeType(a)),{mime_type:i[c],name:n,data:s}}return{mime_type:"",name:"",data:null}}static __up1EncryptBuffer(e,t,r,i,s){const a=require("crypto");function n(e){e="string"==typeof e?i.codec.base64url.toBits(e):i.codec.bytes.toBits(e);let t=i.hash.sha512.hash(e);return{seed:e,key:i.bitArray.bitSlice(t,0,256),iv:i.bitArray.bitSlice(t,256,384),ident:i.bitArray.bitSlice(t,384,512)}}function o(e){let t=Buffer.alloc(2*e.length);for(let r=0,i=e.length;r<i;r++)t.writeUInt16BE(e.charCodeAt(r),2*r);return t}try{if(e.length>5e7)return void s("Input size must be < 50 MB.");e=Buffer.concat([o(JSON.stringify({mime:t,name:r})),Buffer.from([0,0]),e]),e=i.codec.bytes.toBits(new Uint8Array(e));let c=n(a.randomBytes(64));e=i.mode.ccm.encrypt(new i.cipher.aes(c.key),e,c.iv),s(null,Buffer.from(i.codec.bytes.fromBits(e)),i.codec.base64url.fromBits(c.ident),i.codec.base64url.fromBits(c.seed))}catch(e){s(e.toString())}}static __up1EncryptFile(e,t,r,i=!1){const s=require("crypto"),a=require("path"),n=require("original-fs");try{if(n.statSync(e).size>5e7)return void r("File size must be < 50 MB.");n.readFile(e,(n,o)=>{null===n?discordCrypt.__up1EncryptBuffer(o,discordCrypt.__getFileMimeType(e),i?s.pseudoRandomBytes(8).toString("hex")+a.extname(e):a.basename(e),t,r):r(n.toString())})}catch(e){r(e.toString())}}static __constructRandomArtImage(e,t,r,i){const s=Buffer.from(discordCrypt.pbkdf2_sha160(e,Buffer.alloc(t+r).fill(0),!0,void 0,void 0,t*r*3,1e3),"hex");let a=Buffer.concat([Buffer.from("BM"),Buffer.from([0,0,0,0]),Buffer.from([0,0]),Buffer.from([0,0]),Buffer.from([26,0,0,0]),Buffer.from([12,0,0,0]),Buffer([t,0]),Buffer([r,0]),Buffer.from([1,0]),Buffer.from([24,0])]);for(let e=0;e<r;e++)a=Buffer.concat([a,s.slice(e*r,e*r+3*t),Buffer.alloc(t%4).fill(0)]);return a=Buffer.concat([a,Buffer.from([0])]),i?`data:image/bmp;base64,${a.toString("base64")}`:a}static __up1UploadClipboard(e,t,r,i,s){let a=void 0===s?discordCrypt.__clipboardToBuffer():s;if(!a.mime_type.length||null===a.data)return void i("Invalid clipboard data.");let n=0===a.name.length?require("crypto").pseudoRandomBytes(16).toString("hex"):a.name;this.__up1EncryptBuffer(a.data,a.mime_type,n,r,(r,s,a,n)=>{if(null!==r)return void i(r);let o=new(require("form-data"));o.append("ident",a),o.append("file",s,{filename:"file",contentType:"text/plain"}),void 0!==t&&"string"==typeof t&&o.append("api_key",t),require("request").post({headers:o.getHeaders(),uri:`${e}/up`,body:o},(t,r,s)=>{try{null!==t?i(t):i(null,`${e}/#${n}`,`${e}/del?ident=${a}&delkey=${JSON.parse(s).delkey}`,n)}catch(e){i(e.toString())}})})}static __up1UploadFile(e,t,r,i,s,a=!1){this.__up1EncryptFile(e,i,(e,i,a,n)=>{if(null!==e)return void s(e);let o=new(require("form-data"));o.append("ident",a),o.append("file",i,{filename:"file",contentType:"text/plain"}),void 0!==r&&"string"==typeof r&&o.append("api_key",r),require("request").post({headers:o.getHeaders(),uri:`${t}/up`,body:o},(e,r,i)=>{try{null!==e?s(e):s(null,`${t}/#${n}`,`${t}/del?ident=${a}&delkey=${JSON.parse(i).delkey}`,n)}catch(e){s(e.toString())}})},a)}static __tryParseChangelog(e,t){const r=(e,t)=>{let r=e.replace(/(\.0+)+$/,"").split("."),i=t.replace(/(\.0+)+$/,"").split(".");for(let e=0;e<Math.min(r.length,i.length);e++){let t=parseInt(r[e],10)-parseInt(i[e],10);if(t)return t}return r.length-i.length};try{let i="",s=e.split("\r").join("").match(/((Version )(\d+\.)(\d+\.)(\*|\d+))/gm).sort(r);for(let a=s.length-1;a>0;a--){let n=r(t,s[a]);if(n>0||0===n)continue;let o=e.slice(e.indexOf(s[a]),e.indexOf(s[a-1]));i+=`${s[a]}\n\n`,i+=o.replace(s[a],"").replace("\n\n","")}return i}catch(e){discordCrypt.log(`Failed to parse the changelog: ${e}`,"warn")}return e}static __createHash(e,t,r,i,s){try{const a=require("crypto"),n=i?a.createHmac(t,s):a.createHash(t);return n.update(e),n.digest(r?"hex":"base64")}catch(e){return""}}static __pbkdf2(e,t,r,i,s,a,n,o,c){const d=require("crypto");let l,p;if("object"==typeof e?l=Buffer.isBuffer(e)?e:Array.isArray?Buffer.from(e):Buffer.from(e,void 0===i?"utf8":i?"hex":"base64"):"string"==typeof e&&(l=Buffer.from(e,"utf8")),"object"==typeof t?p=Buffer.isBuffer(t)?t:Array.isArray?Buffer.from(t):Buffer.from(t,void 0===s?"utf8":s?"hex":"base64"):"string"==typeof t&&(p=Buffer.from(t,"utf8")),"function"==typeof a)d.pbkdf2(l,p,c,o,n,(e,t)=>{a(e,e?"":t.toString(r?"hex":"base64"))});else try{return d.pbkdf2Sync(l,p,c,o,n).toString(r?"hex":"base64")}catch(e){throw e}return""}static __padMessage(e,t,r,i,s){let a,n;function o(e,t){return e%t===t?t:t-e%t}function c(e,t,r){if(void 0===r){let r=Buffer.alloc(e.length+t);return e.copy(r),Buffer.alloc(t).fill(t).copy(r,e.length),r}return e.slice(0,e.length-e.readInt8(e.length-1))}function d(e,t,r){if(void 0===r){let r=Buffer.alloc(e.length+t);return e.copy(r),Buffer.alloc(t-1).fill(0).copy(r,e.length),Buffer.alloc(1).fill(t).copy(r,e.length+t-1),r}return e.slice(0,e.length-e.readInt8(e.length-1))}function l(e,t,r){const i=require("crypto");if(void 0===r){let r=Buffer.alloc(e.length+t);return e.copy(r),i.randomBytes(t-1).copy(r,e.length),r.writeUInt8(t,e.length+t-1),r}return e.slice(0,e.length-e.readUInt8(e.length-1))}function p(e,t,r){if(void 0===r){let r=Buffer.alloc(e.length+t);return e.copy(r),Buffer.alloc(1).fill(128).copy(r,e.length),Buffer.alloc(t-1).fill(0).copy(e,e.length+1),r}{let t=e.length-1;for(;t>0&&0===e[t];t--);let r=e.slice(0,t+1);return r.slice(0,r.length-1)}}switch(a=discordCrypt.__toBuffer(e,i),n=s?0:o(a.length,r/8),t.toUpperCase()){case"PKC7":return c(a,n,s);case"ANS2":return d(a,n,s);case"ISO1":return l(a,n,s);case"ISO9":return p(a,n,s);default:return""}}static __isValidCipher(e){const t=require("crypto");let r=!1,i=e.toLowerCase();return t.getCiphers().every(e=>e!==i||(r=!0,!1)),r}static __validateKeyIV(e,t=256,r){let i=t/8;if(e.length!==i){let t;switch(i){case 8:t=discordCrypt.whirlpool64;break;case 16:t=discordCrypt.sha512_128;break;case 20:t=discordCrypt.sha160;break;case 24:t=discordCrypt.whirlpool192;break;case 32:t=discordCrypt.sha256;break;case 64:t=void 0!==r?discordCrypt.sha512:discordCrypt.whirlpool;break;default:throw"Invalid block size specified for key or iv. Only 64, 128, 160, 192, 256 and 512 bit keys are supported."}return Buffer.from(t(e,!0),"hex")}return Buffer.from(e)}static __validateMessage(e,t){try{return discordCrypt.__toBuffer(e,t)}catch(e){throw"exception - Invalid message type."}}static scrypt(e,t,r,i=16384,s=8,a=1,n=null){let o=require("crypto"),c,d;function l(e,t,r,i){return o.pbkdf2Sync(e,t,i,r,"sha256")}function p(e,t,r,i,s){let a,n,o,c;for(a=0,n=16*(2*r-1);a<16;a++)s[a]=e[n+a];for(a=0;a<2*r;a++){for(n=0,o=16*a;n<16;n++)s[n]^=e[o+n];for(n=0;n<16;n++)i[n]=s[n];let r=(e,t)=>e<<t|e>>>32-t;for(n=8;n>0;n-=2)i[4]^=r(i[0]+i[12],7),i[8]^=r(i[4]+i[0],9),i[12]^=r(i[8]+i[4],13),i[0]^=r(i[12]+i[8],18),i[9]^=r(i[5]+i[1],7),i[13]^=r(i[9]+i[5],9),i[1]^=r(i[13]+i[9],13),i[5]^=r(i[1]+i[13],18),i[14]^=r(i[10]+i[6],7),i[2]^=r(i[14]+i[10],9),i[6]^=r(i[2]+i[14],13),i[10]^=r(i[6]+i[2],18),i[3]^=r(i[15]+i[11],7),i[7]^=r(i[3]+i[15],9),i[11]^=r(i[7]+i[3],13),i[15]^=r(i[11]+i[7],18),i[1]^=r(i[0]+i[3],7),i[2]^=r(i[1]+i[0],9),i[3]^=r(i[2]+i[1],13),i[0]^=r(i[3]+i[2],18),i[6]^=r(i[5]+i[4],7),i[7]^=r(i[6]+i[5],9),i[4]^=r(i[7]+i[6],13),i[5]^=r(i[4]+i[7],18),i[11]^=r(i[10]+i[9],7),i[8]^=r(i[11]+i[10],9),i[9]^=r(i[8]+i[11],13),i[10]^=r(i[9]+i[8],18),i[12]^=r(i[15]+i[14],7),i[13]^=r(i[12]+i[15],9),i[14]^=r(i[13]+i[12],13),i[15]^=r(i[14]+i[13],18);for(n=0;n<16;++n)s[n]+=i[n];for(n=0,o=t+16*a;n<16;n++)e[n+o]=s[n]}for(a=0;a<r;a++)for(n=0,o=t+2*a*16,c=16*a;n<16;n++)e[c+n]=e[o+n];for(a=0;a<r;a++)for(n=0,o=t+16*(2*a+1),c=16*(a+r);n<16;n++)e[c+n]=e[o+n]}function u(e,t,i,s,a,n){let o,c,d,u=l(e,t,128*a*s,1),g=new Uint32Array(32*a*s),h=new Uint32Array(64*s),f=new Uint32Array(32*s*i),y=new Uint32Array(16),m=new Uint32Array(16);for(let e=0;e<g.length;e++){let t=4*e;g[e]=(255&u[t+3])<<24|(255&u[t+2])<<16|(255&u[t+1])<<8|(255&u[t])<<0}let b=32*s;o=a*i*2,c=0,d=null;let C=!1,k=0,v=0,S,x,w=parseInt(1e3/s),M="undefined"!=typeof setImmediate?setImmediate:setTimeout;const I=function(){if(C)return void n(new Error("cancelled"),c/o);let t,B,E,L,D;switch(k){case 0:x=32*v*s;for(let e=0;e<b;e++)h[e]=g[x+e];k=1,S=0;case 1:for((t=i-S)>w&&(t=w),B=0;B<t;B++){for(E=(S+B)*b,L=b;L--;)f[L+E]=h[L];p(h,b,s,y,m)}if(S+=t,c+=t,(D=parseInt(1e3*c/o))!==d){if(C=n(null,c/o))break;d=D}if(S<i)break;S=0,k=2;case 2:for((t=i-S)>w&&(t=w),B=0;B<t;B++){for(L=0,E=(h[16*(2*s-1)]&i-1)*b;L<b;L++)h[L]^=f[E+L];p(h,b,s,y,m)}if(S+=t,c+=t,(D=parseInt(1e3*c/o))!==d){if(C=n(null,c/o))break;d=D}if(S<i)break;for(L=0;L<b;L++)g[x+L]=h[L];if(++v<a){k=0;break}for(u=[],B=0;B<g.length;B++)u.push(g[B]>>0&255),u.push(g[B]>>8&255),u.push(g[B]>>16&255),u.push(g[B]>>24&255);return void n(null,1,Buffer.from(l(e,Buffer.from(u),r,1)));default:return void n(new Error("invalid state"),0)}M(I)};I()}if("object"==typeof e||"string"==typeof e)if(Array.isArray(e))c=Buffer.from(e);else if(Buffer.isBuffer(e))c=e;else{if("string"!=typeof e)return discordCrypt.log("Invalid input parameter type specified!","error"),!1;c=Buffer.from(e,"utf8")}if("object"==typeof t||"string"==typeof t)if(Array.isArray(t))d=Buffer.from(t);else if(Buffer.isBuffer(t))d=t;else{if("string"!=typeof t)return discordCrypt.log("Invalid salt parameter type specified!","error"),!1;d=Buffer.from(t,"utf8")}return"number"!=typeof r?(discordCrypt.log("Invalid output_length parameter specified. Must be a numeric value.","error"),!1):r<=0||r>=65536?(discordCrypt.log("Invalid output_length parameter specified. Must be a numeric value.","error"),!1):!i||i&i-1!=0?(discordCrypt.log("Parameter N must be a power of 2.","error"),!1):void 0!==n&&null!==n?(setTimeout(()=>{u(c,d,i,s,a,n)},1),!0):(discordCrypt.log("No callback specified.","error"),!1)}static whirlpool64(e,t){return Buffer.from(discordCrypt.whirlpool(e,!0),"hex").slice(0,8).toString(t?"hex":"base64")}static sha512_128(e,t){return Buffer.from(discordCrypt.sha512(e,!0),"hex").slice(0,16).toString(t?"hex":"base64")}static whirlpool192(e,t){return Buffer.from(discordCrypt.sha512(e,!0),"hex").slice(0,24).toString(t?"hex":"base64")}static sha160(e,t){return discordCrypt.__createHash(e,"sha1",t)}static sha256(e,t){return discordCrypt.__createHash(e,"sha256",t)}static sha512(e,t){return discordCrypt.__createHash(e,"sha512",t)}static whirlpool(e,t){return discordCrypt.__createHash(e,"whirlpool",t)}static hmac_sha256(e,t,r){return discordCrypt.__createHash(e,"sha256",r,!0,t)}static hmac_sha512(e,t,r){return discordCrypt.__createHash(e,"sha512",r,!0,t)}static hmac_whirlpool(e,t,r){return discordCrypt.__createHash(e,"whirlpool",r,!0,t)}static pbkdf2_sha160(e,t,r,i,s,a=32,n=5e3,o){return discordCrypt.__pbkdf2(e,t,r,i,s,o,"sha1",a,n)}static pbkdf2_sha256(e,t,r,i,s,a=32,n=5e3,o){return discordCrypt.__pbkdf2(e,t,r,i,s,o,"sha256",a,n)}static pbkdf2_sha512(e,t,r,i,s,a=32,n=5e3,o){return discordCrypt.__pbkdf2(e,t,r,i,s,o,"sha512",a,n)}static pbkdf2_whirlpool(e,t,r,i,s,a=32,n=5e3,o){return discordCrypt.__pbkdf2(e,t,r,i,s,o,"whirlpool",a,n)}static __encrypt(e,t,r,i,s,a,n,o=256,c=128,d,l=1e3){const p=`${e}${void 0===t?"":"-"+t}`,u=require("crypto");let g,h,f,y,m,b;if(!discordCrypt.__isValidCipher(p)||-1===["cbc","cfb","ofb"].indexOf(t.toLowerCase()))return null;if(g=discordCrypt.__padMessage(i,r,o,n),h=discordCrypt.__validateKeyIV(s,o),void 0!==d){if(!(y=discordCrypt.__toBuffer(d))||0===y.length)return null;8!==y.length&&(y=Buffer.from(discordCrypt.whirlpool64(y,!0),"hex"))}else y=u.randomBytes(8);f=(m=discordCrypt.pbkdf2_sha256(h.toString("hex"),y.toString("hex"),!0,!0,!0,c/8+o/8,l)).slice(0,c/8),h=m.slice(c/8,c/8+o/8),(b=u.createCipheriv(p,h,f)).setAutoPadding(!1);let C=b.update(g,void 0,"hex");return C+=b.final("hex"),Buffer.from(y.toString("hex")+C,"hex").toString(a?"hex":"base64")}static __decrypt(e,t,r,i,s,a,n,o=256,c=128,d=1e3){const l=`${e}${void 0===t?"":"-"+t}`,p=require("crypto");let u,g,h,f,y,m;if(!discordCrypt.__isValidCipher(l)||-1===["cbc","ofb","cfb"].indexOf(t.toLowerCase()))return null;u=discordCrypt.__validateMessage(i,n),g=discordCrypt.__validateKeyIV(s,o),f=u.slice(0,8),h=(y=discordCrypt.pbkdf2_sha256(g.toString("hex"),f.toString("hex"),!0,!0,!0,c/8+o/8,d)).slice(0,c/8),g=y.slice(c/8,c/8+o/8),u=u.slice(8),(m=p.createDecipheriv(l,g,h)).setAutoPadding(!1);let b=m.update(u,void 0,"hex");return b+=m.final("hex"),(b=discordCrypt.__padMessage(b,r,o,!0,!0)).toString(a)}static blowfish512_encrypt(e,t,r,i,s=!1,a,n,o=1e3){const c=512,d=64;return discordCrypt.__encrypt("bf",r,i,e,t,s,a,512,64,n,o)}static blowfish512_decrypt(e,t,r,i,s="utf8",a,n=1e3){const o=512,c=64;return discordCrypt.__decrypt("bf",r,i,e,t,s,a,512,64,n)}static aes256_encrypt(e,t,r,i,s=!1,a,n,o=1e3){const c=256,d=128;return discordCrypt.__encrypt("aes-256",r,i,e,t,s,a,256,128,n,o)}static aes256_decrypt(e,t,r,i,s="utf8",a,n=1e3){const o=256,c=128;return discordCrypt.__decrypt("aes-256",r,i,e,t,s,a,256,128,n)}static aes256_encrypt_gcm(e,t,r,i=!1,s,a,n,o=1e3){const c=128,d=256,l="aes-256-gcm",p=require("crypto");let u,g,h,f,y,m;if(u=discordCrypt.__padMessage(e,r,256,s),g=discordCrypt.__validateKeyIV(t,256),void 0!==n){if(!(f=discordCrypt.__toBuffer(n))||0===f.length)return null;8!==f.length&&(f=Buffer.from(discordCrypt.whirlpool64(f,!0),"hex"))}else f=p.randomBytes(8);h=(y=discordCrypt.pbkdf2_sha256(g.toString("hex"),f.toString("hex"),!0,!0,!0,48,o)).slice(0,16),g=y.slice(16,48),m=p.createCipheriv(l,g,h),void 0!==a&&m.setAAD(discordCrypt.__toBuffer(a)),m.setAutoPadding(!1);let b=m.update(u,void 0,"hex");return b+=m.final("hex"),Buffer.from(m.getAuthTag().toString("hex")+f.toString("hex")+b,"hex").toString(i?"hex":"base64")}static aes256_decrypt_gcm(e,t,r,i="utf8",s,a,n=1e3){const o=128,c=256,d="aes-256-gcm",l=require("crypto");let p,u,g,h,f,y,m;p=discordCrypt.__validateMessage(e,s),u=discordCrypt.__validateKeyIV(t,256),f=p.slice(0,16),h=(p=p.slice(16)).slice(0,8),p=p.slice(8),g=(y=discordCrypt.pbkdf2_sha256(u.toString("hex"),h.toString("hex"),!0,!0,!0,48,n)).slice(0,16),u=y.slice(16,48),(m=l.createDecipheriv(d,u,g)).setAuthTag(f),void 0!==a&&m.setAAD(discordCrypt.__toBuffer(a)),m.setAutoPadding(!1);let b=m.update(p,void 0,"hex");return b+=m.final("hex"),(b=discordCrypt.__padMessage(b,r,256,!0,!0)).toString(i)}static camellia256_encrypt(e,t,r,i,s=!1,a,n,o=1e3){const c=256,d=128;return discordCrypt.__encrypt("camellia-256",r,i,e,t,s,a,256,128,n,o)}static camellia256_decrypt(e,t,r,i,s="utf8",a,n=1e3){const o=256,c=128;return discordCrypt.__decrypt("camellia-256",r,i,e,t,s,a,256,128,n)}static tripledes192_encrypt(e,t,r,i,s=!1,a,n,o=1e3){const c=192,d=64;return discordCrypt.__encrypt("des-ede3",r,i,e,t,s,a,192,64,n,o)}static tripledes192_decrypt(e,t,r,i,s="utf8",a,n=1e3){const o=192,c=64;return discordCrypt.__decrypt("des-ede3",r,i,e,t,s,a,192,64,n)}static idea128_encrypt(e,t,r,i,s=!1,a,n,o=1e3){const c=128,d=64;return discordCrypt.__encrypt("idea",r,i,e,t,s,a,128,64,n,o)}static idea128_decrypt(e,t,r,i,s="utf8",a,n=1e3){const o=128,c=64;return discordCrypt.__decrypt("idea",r,i,e,t,s,a,128,64,n)}static cipherStringToIndex(e,t){let r=0;if("number"==typeof e)return e;switch("string"==typeof e&&-1!==e.search("-")&&void 0===t&&(t=(e=e.split("-")[0]).split("-")[1]),e){case"bf":break;case"aes":r=1;break;case"camel":r=2;break;case"idea":r=3;break;case"tdes":r=4;break;default:return 0}if(void 0!==t)switch(t){case"bf":break;case"aes":r+=5;break;case"camel":r+=10;break;case"idea":r+=15;break;case"tdes":r+=20}return r}static cipherIndexToString(e,t){return void 0!==t&&t?e>=20?"tdes":e>=15?"idea":e>=10?"camel":e>=5?"aes":"bf":(e>=20?e-=20:e>=15&&e<=19?e-=15:e>=10&&e<=14?e-=10:e>=5&&e<=9&&(e-=5),1===e?"aes":2===e?"camel":3===e?"idea":4===e?"tdes":"bf")}static entropicBitLength(e){let t=Object.create(null),r,i=0,s=e.length;for(r in e.split("").forEach(e=>{t[e]?t[e]++:t[e]=1}),t){let e=t[r]/s;i-=e*Math.log(e)/Math.log(2)}return parseInt(i*s)}static getBraille(){return Array.from("\u2800\u2801\u2802\u2803\u2804\u2805\u2806\u2807\u2808\u2809\u280a\u280b\u280c\u280d\u280e\u280f\u2810\u2811\u2812\u2813\u2814\u2815\u2816\u2817\u2818\u2819\u281a\u281b\u281c\u281d\u281e\u281f\u2820\u2821\u2822\u2823\u2824\u2825\u2826\u2827\u2828\u2829\u282a\u282b\u282c\u282d\u282e\u282f\u2830\u2831\u2832\u2833\u2834\u2835\u2836\u2837\u2838\u2839\u283a\u283b\u283c\u283d\u283e\u283f\u2840\u2841\u2842\u2843\u2844\u2845\u2846\u2847\u2848\u2849\u284a\u284b\u284c\u284d\u284e\u284f\u2850\u2851\u2852\u2853\u2854\u2855\u2856\u2857\u2858\u2859\u285a\u285b\u285c\u285d\u285e\u285f\u2860\u2861\u2862\u2863\u2864\u2865\u2866\u2867\u2868\u2869\u286a\u286b\u286c\u286d\u286e\u286f\u2870\u2871\u2872\u2873\u2874\u2875\u2876\u2877\u2878\u2879\u287a\u287b\u287c\u287d\u287e\u287f\u2880\u2881\u2882\u2883\u2884\u2885\u2886\u2887\u2888\u2889\u288a\u288b\u288c\u288d\u288e\u288f\u2890\u2891\u2892\u2893\u2894\u2895\u2896\u2897\u2898\u2899\u289a\u289b\u289c\u289d\u289e\u289f\u28a0\u28a1\u28a2\u28a3\u28a4\u28a5\u28a6\u28a7\u28a8\u28a9\u28aa\u28ab\u28ac\u28ad\u28ae\u28af\u28b0\u28b1\u28b2\u28b3\u28b4\u28b5\u28b6\u28b7\u28b8\u28b9\u28ba\u28bb\u28bc\u28bd\u28be\u28bf\u28c0\u28c1\u28c2\u28c3\u28c4\u28c5\u28c6\u28c7\u28c8\u28c9\u28ca\u28cb\u28cc\u28cd\u28ce\u28cf\u28d0\u28d1\u28d2\u28d3\u28d4\u28d5\u28d6\u28d7\u28d8\u28d9\u28da\u28db\u28dc\u28dd\u28de\u28df\u28e0\u28e1\u28e2\u28e3\u28e4\u28e5\u28e6\u28e7\u28e8\u28e9\u28ea\u28eb\u28ec\u28ed\u28ee\u28ef\u28f0\u28f1\u28f2\u28f3\u28f4\u28f5\u28f6\u28f7\u28f8\u28f9\u28fa\u28fb\u28fc\u28fd\u28fe\u28ff")}static isValidBraille(e){let t=discordCrypt.getBraille();for(let r=0;r<e.length;r++)if(-1===t.indexOf(e[r]))return!1;return!0}static getBase64(){return Array.from("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")}static getDHBitSizes(){return[768,1024,1536,2048,3072,4096,6144,8192]}static getECDHBitSizes(){return[224,256,384,409,521,571]}static isValidExchangeAlgorithm(e){return e>=0&&e<=discordCrypt.getDHBitSizes().length+discordCrypt.getECDHBitSizes().length-1}static indexToExchangeAlgorithmString(e){let t=discordCrypt.getDHBitSizes(),r=discordCrypt.getECDHBitSizes(),i=["DH-","ECDH-"];return discordCrypt.isValidExchangeAlgorithm(e)?e<=t.length-1?i[0]+t[e]:i[1]+r[e-t.length]:"Invalid Algorithm"}static indexToAlgorithmBitLength(e){let t=discordCrypt.getDHBitSizes(),r=discordCrypt.getECDHBitSizes();return discordCrypt.isValidExchangeAlgorithm(e)?e<=t.length-1?t[e]:r[e-t.length]:0}static computeExchangeSharedSecret(e,t,r,i){let s,a;s=r?"base64":"hex",a=i?"base64":"hex";try{return e.computeSecret(t,s,a)}catch(e){return null}}static generateDH(e,t){let r,i;switch(e){case 768:r="modp1";break;case 1024:r="modp2";break;case 1536:r="modp5";break;case 2048:r="modp14";break;case 3072:r="modp15";break;case 4096:r="modp16";break;case 6144:r="modp17";break;case 8192:r="modp18";break;default:return null}try{i=require("crypto").getDiffieHellman(r)}catch(e){return null}return void 0!==i&&null!==i&&void 0!==i.generateKeys&&(void 0===t?i.generateKeys():void 0!==i.setPrivateKey&&i.setPrivateKey(t)),i}static generateECDH(e,t){let r,i;switch(e){case 224:r="secp224k1";break;case 384:r="secp384r1";break;case 409:r="sect409k1";break;case 521:r="secp521r1";break;case 571:r="sect571k1";break;case 256:break;default:return null}try{256!==e?i=require("crypto").createECDH(r):(i=new global.Curve25519).generateKeys(void 0,require("crypto").randomBytes(32))}catch(e){return null}return void 0!==i&&null!==i&&void 0!==i.generateKeys&&256!==e&&(void 0===t?i.generateKeys("hex","compressed"):void 0!==i.setPrivateKey&&i.setPrivateKey(t)),i}static substituteMessage(e,t){let r=discordCrypt.getBraille(),i="",s=0;if(void 0!==t){if(!Buffer.isBuffer(e))throw"Message input is not a buffer.";for(let t=0;t<e.length;t++)i+=r[e[t]]}else for(let t=0;t<e.length;t++){if(-1===(s=r.indexOf(e[t])))throw"Message contains invalid characters.";i+=`0${s.toString(16)}`.slice(-2)}return i}static metaDataEncode(e,t,r,i){"string"==typeof e&&(e=discordCrypt.cipherStringToIndex(e)),"string"==typeof t&&(t=["cbc","cfb","ofb"].indexOf(t.toLowerCase())),"string"==typeof r&&(r=["pkc7","ans2","iso1","iso9"].indexOf(r.toLowerCase()));let s=Buffer.from([e,t,r,parseInt(i)]);return discordCrypt.substituteMessage(s,!0)}static metaDataDecode(e){return Buffer.from(discordCrypt.substituteMessage(e),"hex")}static symmetricEncrypt(e,t,r,i,s,a){const n=new Uint8Array(Buffer.from("DiscordCrypt MAC"));function o(e,t,r,i,s){switch(r){case 0:return discordCrypt.blowfish512_encrypt(e,t,i,s);case 1:return discordCrypt.aes256_encrypt(e,t,i,s);case 2:return discordCrypt.camellia256_encrypt(e,t,i,s);case 3:return discordCrypt.idea128_encrypt(e,t,i,s);case 4:return discordCrypt.tripledes192_encrypt(e,t,i,s);default:return null}}let c=s.toLowerCase(),d=a,l="";if(i>=0&&i<=4)l=discordCrypt.blowfish512_encrypt(o(e,t,i,c,d),r,c,d,!0,!1);else if(i>=5&&i<=9)l=discordCrypt.aes256_encrypt(o(e,t,i-5,c,d),r,c,d,!0,!1);else if(i>=10&&i<=14)l=discordCrypt.camellia256_encrypt(o(e,t,i-10,c,d),r,c,d,!0,!1);else if(i>=15&&i<=19)l=discordCrypt.idea128_encrypt(o(e,t,i-15,c,d),r,c,d,!0,!1);else{if(!(i>=20&&i<=24))throw`Unknown cipher selected: ${i}`;l=discordCrypt.tripledes192_encrypt(o(e,t,i-20,c,d),r,c,d,!0,!1)}let p=kmac256(new Uint8Array(Buffer.concat([t,r])),new Uint8Array(Buffer.from(l,"hex")),256,n);return l=Buffer.from(p+l,"hex"),discordCrypt.substituteMessage(l,!0)}static symmetricDecrypt(e,t,r,i,s,a){const n=new Uint8Array(Buffer.from("DiscordCrypt MAC")),o=require("crypto");function c(e,t,r,i,s,a="utf8",n){switch(r){case 0:return discordCrypt.blowfish512_decrypt(e,t,i,s,a,n);case 1:return discordCrypt.aes256_decrypt(e,t,i,s,a,n);case 2:return discordCrypt.camellia256_decrypt(e,t,i,s,a,n);case 3:return discordCrypt.idea128_decrypt(e,t,i,s,a,n);case 4:return discordCrypt.tripledes192_decrypt(e,t,i,s,a,n);default:return null}}let d,l;if("string"!=typeof s)if(0===s)d="cbc";else if(1===s)d="cfb";else{if(2!==s)return"";d="ofb"}if("string"!=typeof a)if(0===a)l="pkc7";else if(1===a)l="ans2";else if(2===a)l="iso1";else{if(3!==a)return"";l="iso9"}try{e=Buffer.from(discordCrypt.substituteMessage(e),"hex");let s=Buffer.from(e.subarray(0,32));e=Buffer.from(e.subarray(32));let a=Buffer.from(kmac256(new Uint8Array(Buffer.concat([t,r])),new Uint8Array(e),256,n),"hex");return o.timingSafeEqual(a,s)?i>=0&&i<=4?c(discordCrypt.blowfish512_decrypt(e,r,d,l,"base64"),t,i,d,l,"utf8",!1):i>=5&&i<=9?c(discordCrypt.aes256_decrypt(e,r,d,l,"base64"),t,i-5,d,l,"utf8",!1):i>=10&&i<=14?c(discordCrypt.camellia256_decrypt(e,r,d,l,"base64"),t,i-10,d,l,"utf8",!1):i>=15&&i<=19?c(discordCrypt.idea128_decrypt(e,r,d,l,"base64"),t,i-15,d,l,"utf8",!1):i>=20&&i<=24?c(discordCrypt.tripledes192_decrypt(e,r,d,l,"base64"),t,i-20,d,l,"utf8",!1):-3:1}catch(e){return 2}}}module.exports={discordCrypt:discordCrypt};